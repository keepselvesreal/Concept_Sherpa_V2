{
  "question_index": 5,
  "original_question": {
    "category": "depth_gaps",
    "gap_description": "대형 프로젝트에서의 멀티클로딩 효과와 한계가 불분명함",
    "question": "대기업에서 plan mode를 선호하는 이유와 멀티클로딩과의 조합 방식은 무엇이고, 복잡한 변경사항에서는 어떤 전략을 사용하는가?",
    "expected_benefit": "복잡한 엔터프라이즈 환경에서 멀티클로딩의 한계와 최적 활용법을 파악해서 큰 규모 프로젝트에서도 효과적으로 사용할 수 있음"
  },
  "answer": "태수야, 참고 문서를 바탕으로 대기업에서의 plan mode 선호 이유와 멀티클로딩 조합 방식에 대해 냉철하게 분석해줄게.\n\n## 대기업이 plan mode를 선호하는 이유\n\n**1. 리스크 관리와 신중한 접근**\n- 대기업에서는 \"plan mode\"를 선호하는데, 이는 Claude Code가 바로 작업에 뛰어들지 않고 코드베이스를 탐색하고 아키텍처를 이해한 다음 엔지니어링 플랜을 세우고 나서 실제 작업을 시작하는 모드야 (ref1.md, ref2.md)\n- 작은 회사들이 \"auto-accept mode\"로 승인 없이 자동 편집을 선호하는 것과는 정반대의 접근이지\n\n**2. 복잡한 시스템 고려**\n- 더 어렵고 복잡한 변경사항에 대해서는 이런 사전 계획 접근법이 매우 유용하다고 명시되어 있어 (ref1.md)\n\n## 멀티클로딩과의 조합 방식\n\n**1. 역할 분리 전략**\n- 개발자들이 6개의 Claude 세션을 동시에 실행하면서 각각을 다른 목적으로 특화시키는 패턴을 활용해 (ref1.md, ref2.md)\n- 예를 들어: 하나는 질문 전용(코드 수정 안 함), 다른 하나는 실제 코드 편집용으로 나누어서 충돌 방지 (ref1.md)\n\n**2. 병렬 작업 체계**\n- 각각 다른 브랜치나 다른 Git 저장소 복사본에서 작업하면서, 하나가 멈추면 다른 것으로 바로 넘어가는 방식 (ref1.md, ref2.md)\n- 이는 파워유저만의 기능이 아니라 실제로 많은 사람들이 사용하는 일반적인 패턴이 되었어\n\n## 복잡한 변경사항에서의 전략\n\n**1. CLAUDE.md 파일 활용**\n- 코드 아키텍처, 코드베이스의 함정들, 베스트 프랙티스를 CLAUDE.md 파일에 투자하면 출력 품질이 극적으로 향상된다고 해 (ref1.md)\n- 이게 커스터마이징의 가장 일반적이고 효과적인 방법이야\n\n**2. 특화 에이전트 개발**\n- 보안 에이전트, 인시던트 대응 에이전트, 법무나 컴플라이언스 에이전트 등 도메인별 전문화된 에이전트를 구축 (ref1.md)\n- Claude Code SDK를 통해 30분 안에 꽤 강력한 에이전트 프로토타입 제작 가능 (ref2.md)\n\n**3. 명확한 소통 전략**\n- 작업 목적, 평가 기준, 제약사항을 명확히 전달하는 것이 핵심 (ref1.md, ref2.md)\n- Claude가 이상하게 행동하면 \"왜 그렇게 생각했어?\"라고 물어보면서 추론 과정을 파악하고 디버깅하는 대화형 접근 활용\n\n태수야, 결론적으로 대기업들은 리스크를 최소화하면서도 멀티클로딩의 효율성을 활용하는 하이브리드 접근을 취하고 있어. Plan mode로 신중하게 계획하면서도 여러 세션을 통해 병렬 작업의 이점을 챙기는 거지. 하지만 이런 방식이 항상 최적인 건 아니라는 점도 염두에 둬야 해.",
  "reference_documents": [
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref1.md",
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref2.md"
  ],
  "metadata": {
    "cost": 0.05929875,
    "timestamp": "2025-08-23T15:51:42.714852",
    "status": "success"
  }
}