{
  "question_index": 3,
  "original_question": {
    "category": "unclear_details",
    "gap_description": "세션 전환 판단 기준이 불분명함",
    "question": "멀티클로딩에서 하나의 Claude 세션이 막혔을 때 다른 세션으로 넘어가는 판단 기준과 전환 시점은 언제인가?",
    "expected_benefit": "작업 효율을 극대화하기 위한 세션 전환 타이밍을 정확히 파악해서 막힘 없는 개발 플로우를 유지할 수 있음"
  },
  "answer": "태수야, 멀티클로딩에서 세션 전환 판단 기준과 시점에 대해 참고 문서를 바탕으로 답변해줄게.참고 문서를 보면 멀티클로딩에서 세션 전환에 대한 구체적인 내용이 있어.\n\n## 세션 전환 판단 기준\n\n**1. 작업 충돌 방지 기준**\n- ref1.md Line 46에서 \"하나는 질문 전용(코드 수정 안 함), 다른 하나는 실제 코드 편집용으로 나누어서 충돌을 방지\"라고 명시되어 있어\n- 같은 파일이나 코드베이스에서 동시에 편집하면 충돌이 발생하니까, 용도별로 세션을 분리하는 게 기본 원칙이야\n\n**2. 작업 성격별 분류 기준**\n- ref2.md Line 84에서 \"각각 다른 역할(코드 편집용, 질문 전용)로 분리해서 사용\"하는 패턴이 나와 있어\n- 탐색/질문용 세션과 실제 구현용 세션을 명확히 구분해야 해## 구체적인 전환 시점\n\n**1. 세션이 \"막혔을 때\"의 구체적 상황들**\n- ref1.md에서 \"하나가 멈추면 다른 것으로 넘어가서 계속 작업을 진행\"이라고 했는데, 여기서 \"멈춤\"의 의미는:\n  - API 응답 지연이나 에러\n  - 복잡한 분석 작업으로 인한 긴 대기 시간\n  - 특정 파일에서 작업이 교착 상태에 빠졌을 때\n\n**2. 병렬 작업 전환 패턴**\n- ref1.md Line 48에서 \"각각 다른 브랜치나 다른 Git repo 복사본에서 작업\"하면서 전환한다고 나와 있어\n- 하나의 브랜치에서 작업이 막히면 즉시 다른 브랜치의 세션으로 전환해서 계속 진행## 실용적인 전환 전략\n\n**냉철한 조언으로 말하자면:**\n\n1. **시간 기반 전환**: 한 세션에서 30초 이상 응답이 없으면 바로 다른 세션으로 넘어가는 게 효율적이야\n\n2. **작업 타입별 전환**: \n   - 코드 분석이 필요하면 → 질문 전용 세션\n   - 실제 구현이 필요하면 → 편집 전용 세션\n   - 다른 브랜치 작업이 필요하면 → 해당 브랜치 세션\n\n3. **사전 세션 분리**: ref2.md Line 84에서 나온 것처럼 처음부터 역할을 명확히 분리해서 6개 정도의 세션을 띄워두고 상황에 맞게 전환하는 게 가장 효과적이야\n\n태수야, 참고 문서를 보면 멀티클로딩은 단순히 하나가 막혔을 때만 쓰는 게 아니라, 처음부터 전략적으로 여러 세션을 역할별로 분담해서 사용하는 고급 워크플로우라는 걸 알 수 있어. 기다리지 말고 바로바로 전환하는 게 핵심이야.",
  "reference_documents": [
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref1.md",
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref2.md"
  ],
  "metadata": {
    "cost": 0.1248882,
    "timestamp": "2025-08-23T15:52:08.258725",
    "status": "success"
  }
}