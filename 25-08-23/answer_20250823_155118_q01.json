{
  "question_index": 1,
  "original_question": {
    "category": "missing_concepts",
    "gap_description": "브랜치별 Claude 배치 방법이 불분명함",
    "question": "멀티클로딩에서 각 Claude 세션을 다른 브랜치나 Git 저장소 복사본에 배치하는 구체적인 방법과 설정은 무엇인가?",
    "expected_benefit": "여러 브랜치에서 동시 작업할 때 세션 간 충돌 없이 병렬 개발을 진행할 수 있는 실용적인 설정법을 알게 됨"
  },
  "answer": "태수야, 멀티클로딩에서 각 Claude 세션을 다른 브랜치나 Git 저장소에 배치하는 방법에 대해 참고 문서를 바탕으로 설명해줄게.\n\n## 멀티클로딩의 기본 개념\n\n참고 문서에 따르면, 개발자들이 **동시에 6개의 Claude 세션을 실행**하면서 각각을 다른 용도로 특화시키는 패턴이 일반적으로 사용되고 있어 (ref1.md의 상세 내용, ref2.md Line 46). 이건 단순히 파워유저만의 기능이 아니라 **예상치 못한 일반적인 사용 패턴**이 되었다고 해 (ref1.md 상세 핵심 내용, ref2.md Line 52).\n\n## 구체적인 배치 방법\n\n### 1. 브랜치별 분리 전략\n- **각 Claude 세션을 서로 다른 Git 브랜치에서 실행**\n- 하나의 세션이 막히거나 문제가 생기면 **다른 브랜치의 세션으로 즉시 전환**해서 작업 연속성 유지 (ref1.md 상세 핵심 내용)\n\n### 2. 저장소 복사본 활용\n- **각각 다른 Git 저장소 복사본(클론)**에서 Claude 세션 실행\n- 이렇게 하면 세션 간 충돌 없이 **병렬 작업이 가능** (ref2.md Line 46)\n\n### 3. 역할별 세션 분리\n참고 문서에서 나온 실제 사용 예시:\n- **질문 전용 세션**: 코드는 건드리지 않고 질문만 하는 Claude 인스턴스\n- **코드 편집 전용 세션**: 실제 코드 수정을 담당하는 세션\n- 이렇게 **역할을 분담해서 서로 충돌하지 않게** 함 (ref1.md 상세 핵심 내용)\n\n## 실용적인 설정 방법\n\n### 기본 워크플로우\n1. 각 브랜치나 저장소 복사본에서 별도의 터미널 세션 열기\n2. 각 터미널에서 독립적으로 Claude Code 실행\n3. 각 세션에 **서로 다른 역할이나 작업 범위 할당**\n\n### 장점\n- **작업 연속성**: 하나가 막히면 다른 걸로 바로 전환 가능\n- **병렬 처리**: 동시에 여러 작업 진행\n- **충돌 방지**: 각 세션이 독립적인 환경에서 작업\n\n태수야, 아쉽게도 참고 문서에서는 **구체적인 설정 방법이나 명령어**까지는 나와있지 않아. 하지만 핵심은 각 Claude 세션을 **물리적으로 분리된 Git 환경**(다른 브랜치나 다른 저장소 클론)에서 실행하고, **명확한 역할 분담**을 통해 충돌을 방지하는 거야.\n\n이런 멀티클로딩 패턴이 **예상보다 훨씬 일반적**이 되었다는 점에서, 실제로 개발 생산성에 상당한 도움이 되고 있다는 걸 알 수 있어.",
  "reference_documents": [
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref1.md",
    "/home/nadle/projects/Concept_Sherpa_V2/25-08-23/ref2.md"
  ],
  "metadata": {
    "cost": 0.056999999999999995,
    "timestamp": "2025-08-23T15:51:40.741459",
    "status": "success"
  }
}