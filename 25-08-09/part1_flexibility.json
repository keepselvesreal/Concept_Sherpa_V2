[
  {
    "title": "Part 1â€”Flexibility",
    "level": 0,
    "start_page": 29,
    "end_page": 164,
    "page_count": 136,
    "id": 0,
    "parent_id": null,
    "children_ids": [
      1,
      2,
      17,
      25,
      33,
      43,
      51
    ],
    "is_added_node": false
  },
  {
    "title": "Part 1 Introduction",
    "level": 1,
    "start_page": 29,
    "end_page": 31,
    "page_count": 3,
    "id": 1,
    "parent_id": 0,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "1 Complexity of object- oriented programming",
    "level": 1,
    "start_page": 31,
    "end_page": 53,
    "page_count": 23,
    "id": 2,
    "parent_id": 0,
    "children_ids": [
      3,
      4,
      10,
      16
    ],
    "is_added_node": false
  },
  {
    "title": "1 Introduction",
    "level": 2,
    "start_page": 31,
    "end_page": 32,
    "page_count": 2,
    "id": 3,
    "parent_id": 2,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "1.1 OOP design: Classic or classical?",
    "level": 2,
    "start_page": 32,
    "end_page": 40,
    "page_count": 9,
    "id": 4,
    "parent_id": 2,
    "children_ids": [
      5,
      6,
      7,
      8,
      9
    ],
    "is_added_node": false
  },
  {
    "title": "1.1 Introduction",
    "level": 3,
    "start_page": 32,
    "end_page": 33,
    "page_count": 2,
    "id": 5,
    "parent_id": 4,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "1.1.1 The design phase",
    "level": 3,
    "start_page": 32,
    "end_page": 33,
    "page_count": 2,
    "id": 6,
    "parent_id": 4,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.1.2 UML 101",
    "level": 3,
    "start_page": 34,
    "end_page": 36,
    "page_count": 3,
    "id": 7,
    "parent_id": 4,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.1.3 Explaining each piece of the class diagram",
    "level": 3,
    "start_page": 37,
    "end_page": 39,
    "page_count": 3,
    "id": 8,
    "parent_id": 4,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.1.4 The implementation phase",
    "level": 3,
    "start_page": 40,
    "end_page": 40,
    "page_count": 1,
    "id": 9,
    "parent_id": 4,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.2 Sources of complexity",
    "level": 2,
    "start_page": 41,
    "end_page": 51,
    "page_count": 11,
    "id": 10,
    "parent_id": 2,
    "children_ids": [
      11,
      12,
      13,
      14,
      15
    ],
    "is_added_node": false
  },
  {
    "title": "1.2 Introduction",
    "level": 3,
    "start_page": 41,
    "end_page": 42,
    "page_count": 2,
    "id": 11,
    "parent_id": 10,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "1.2.1 Many relations between classes",
    "level": 3,
    "start_page": 42,
    "end_page": 43,
    "page_count": 2,
    "id": 12,
    "parent_id": 10,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.2.2 Unpredictable code behavior",
    "level": 3,
    "start_page": 44,
    "end_page": 45,
    "page_count": 2,
    "id": 13,
    "parent_id": 10,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.2.3 Not trivial data serialization",
    "level": 3,
    "start_page": 46,
    "end_page": 47,
    "page_count": 2,
    "id": 14,
    "parent_id": 10,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "1.2.4 Complex class hierarchies",
    "level": 3,
    "start_page": 48,
    "end_page": 51,
    "page_count": 4,
    "id": 15,
    "parent_id": 10,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 52,
    "end_page": 53,
    "page_count": 2,
    "id": 16,
    "parent_id": 2,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "2 Separation between code and data",
    "level": 1,
    "start_page": 54,
    "end_page": 70,
    "page_count": 17,
    "id": 17,
    "parent_id": 0,
    "children_ids": [
      18,
      19,
      20,
      21,
      22,
      23,
      24
    ],
    "is_added_node": false
  },
  {
    "title": "2 Introduction",
    "level": 2,
    "start_page": 54,
    "end_page": 55,
    "page_count": 2,
    "id": 18,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "2.1 The two parts of a DOP system",
    "level": 2,
    "start_page": 55,
    "end_page": 56,
    "page_count": 2,
    "id": 19,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "2.2 Data entities",
    "level": 2,
    "start_page": 57,
    "end_page": 58,
    "page_count": 2,
    "id": 20,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "2.3 Code modules",
    "level": 2,
    "start_page": 59,
    "end_page": 63,
    "page_count": 5,
    "id": 21,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "2.4 DOP systems are easy to understand",
    "level": 2,
    "start_page": 64,
    "end_page": 65,
    "page_count": 2,
    "id": 22,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "2.5 DOP systems are flexible",
    "level": 2,
    "start_page": 66,
    "end_page": 69,
    "page_count": 4,
    "id": 23,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 70,
    "end_page": 70,
    "page_count": 1,
    "id": 24,
    "parent_id": 17,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "3 Basic data manipulation",
    "level": 1,
    "start_page": 71,
    "end_page": 98,
    "page_count": 28,
    "id": 25,
    "parent_id": 0,
    "children_ids": [
      26,
      27,
      28,
      29,
      30,
      31,
      32
    ],
    "is_added_node": false
  },
  {
    "title": "3 Introduction",
    "level": 2,
    "start_page": 71,
    "end_page": 72,
    "page_count": 2,
    "id": 26,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "3.1 Designing a data model",
    "level": 2,
    "start_page": 72,
    "end_page": 75,
    "page_count": 4,
    "id": 27,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "3.2 Representing records as maps",
    "level": 2,
    "start_page": 76,
    "end_page": 81,
    "page_count": 6,
    "id": 28,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "3.3 Manipulating data with generic functions",
    "level": 2,
    "start_page": 82,
    "end_page": 85,
    "page_count": 4,
    "id": 29,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "3.4 Calculating search results",
    "level": 2,
    "start_page": 86,
    "end_page": 92,
    "page_count": 7,
    "id": 30,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "3.5 Handling records of different types",
    "level": 2,
    "start_page": 93,
    "end_page": 96,
    "page_count": 4,
    "id": 31,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 97,
    "end_page": 98,
    "page_count": 2,
    "id": 32,
    "parent_id": 25,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4 State management",
    "level": 1,
    "start_page": 99,
    "end_page": 118,
    "page_count": 20,
    "id": 33,
    "parent_id": 0,
    "children_ids": [
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42
    ],
    "is_added_node": false
  },
  {
    "title": "4 Introduction",
    "level": 2,
    "start_page": 99,
    "end_page": 100,
    "page_count": 2,
    "id": 34,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "4.1 Multiple versions of the system data",
    "level": 2,
    "start_page": 100,
    "end_page": 101,
    "page_count": 2,
    "id": 35,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.2 Structural sharing",
    "level": 2,
    "start_page": 102,
    "end_page": 107,
    "page_count": 6,
    "id": 36,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.3 Implementing structural sharing",
    "level": 2,
    "start_page": 108,
    "end_page": 109,
    "page_count": 2,
    "id": 37,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.4 Data safety",
    "level": 2,
    "start_page": 110,
    "end_page": 110,
    "page_count": 1,
    "id": 38,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.5 The commit phase of a mutation",
    "level": 2,
    "start_page": 111,
    "end_page": 112,
    "page_count": 2,
    "id": 39,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.6 Ensuring system state integrity",
    "level": 2,
    "start_page": 113,
    "end_page": 113,
    "page_count": 1,
    "id": 40,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "4.7 Restoring previous states",
    "level": 2,
    "start_page": 114,
    "end_page": 116,
    "page_count": 3,
    "id": 41,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 117,
    "end_page": 118,
    "page_count": 2,
    "id": 42,
    "parent_id": 33,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "5 Basic concurrency control",
    "level": 1,
    "start_page": 119,
    "end_page": 137,
    "page_count": 19,
    "id": 43,
    "parent_id": 0,
    "children_ids": [
      44,
      45,
      46,
      47,
      48,
      49,
      50
    ],
    "is_added_node": false
  },
  {
    "title": "5 Introduction",
    "level": 2,
    "start_page": 119,
    "end_page": 120,
    "page_count": 2,
    "id": 44,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "5.1 Optimistic concurrency control",
    "level": 2,
    "start_page": 120,
    "end_page": 121,
    "page_count": 2,
    "id": 45,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "5.2 Reconciliation between concurrent mutations",
    "level": 2,
    "start_page": 122,
    "end_page": 124,
    "page_count": 3,
    "id": 46,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "5.3 Reducing collections",
    "level": 2,
    "start_page": 125,
    "end_page": 126,
    "page_count": 2,
    "id": 47,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "5.4 Structural difference",
    "level": 2,
    "start_page": 127,
    "end_page": 133,
    "page_count": 7,
    "id": 48,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "5.5 Implementing the reconciliation algorithm",
    "level": 2,
    "start_page": 134,
    "end_page": 135,
    "page_count": 2,
    "id": 49,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 136,
    "end_page": 137,
    "page_count": 2,
    "id": 50,
    "parent_id": 43,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6 Unit tests",
    "level": 1,
    "start_page": 138,
    "end_page": 164,
    "page_count": 27,
    "id": 51,
    "parent_id": 0,
    "children_ids": [
      52,
      53,
      54,
      59,
      60,
      61,
      62
    ],
    "is_added_node": false
  },
  {
    "title": "6 Introduction",
    "level": 2,
    "start_page": 138,
    "end_page": 139,
    "page_count": 2,
    "id": 52,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "6.1 The simplicity of data-oriented test cases",
    "level": 2,
    "start_page": 138,
    "end_page": 139,
    "page_count": 2,
    "id": 53,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6.2 Unit tests for data manipulation code",
    "level": 2,
    "start_page": 140,
    "end_page": 148,
    "page_count": 9,
    "id": 54,
    "parent_id": 51,
    "children_ids": [
      55,
      56,
      57,
      58
    ],
    "is_added_node": false
  },
  {
    "title": "6.2 Introduction",
    "level": 3,
    "start_page": 140,
    "end_page": 141,
    "page_count": 2,
    "id": 55,
    "parent_id": 54,
    "children_ids": [],
    "is_added_node": true
  },
  {
    "title": "6.2.1 The tree of function calls",
    "level": 3,
    "start_page": 141,
    "end_page": 142,
    "page_count": 2,
    "id": 56,
    "parent_id": 54,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6.2.2 Unit tests for functions down the tree",
    "level": 3,
    "start_page": 143,
    "end_page": 146,
    "page_count": 4,
    "id": 57,
    "parent_id": 54,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6.2.3 Unit tests for nodes in the tree",
    "level": 3,
    "start_page": 147,
    "end_page": 148,
    "page_count": 2,
    "id": 58,
    "parent_id": 54,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6.3 Unit tests for queries",
    "level": 2,
    "start_page": 149,
    "end_page": 153,
    "page_count": 5,
    "id": 59,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "6.4 Unit tests for mutations",
    "level": 2,
    "start_page": 154,
    "end_page": 161,
    "page_count": 8,
    "id": 60,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Moving forward",
    "level": 2,
    "start_page": 162,
    "end_page": 161,
    "page_count": 0,
    "id": 61,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": false
  },
  {
    "title": "Summary",
    "level": 2,
    "start_page": 162,
    "end_page": 164,
    "page_count": 3,
    "id": 62,
    "parent_id": 51,
    "children_ids": [],
    "is_added_node": false
  }
]