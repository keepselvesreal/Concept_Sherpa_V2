{
  "chapter": "12",
  "title": "Advanced data validation",
  "page_info": {
    "page": 303,
    "title": "Advanced data validation",
    "pattern_matched": "Chapter 12",
    "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
  },
  "leaf_nodes": [
    {
      "text": "- 12.0 Introduction (사용자 추가)",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.0 Introduction (사용자 추가) (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 98,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.1 Function arguments validation",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.1 Function arguments validation (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 99,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.2 Return value validation",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.2 Return value validation (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 100,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.3 Advanced data validation",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.3 Advanced data validation (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 101,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.4 Automatic generation of data model diagrams",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.4 Automatic generation of data model diagrams (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 102,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.5 Automatic generation of schema-based unit tests",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.5 Automatic generation of schema-based unit tests (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 103,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- 12.6 A new gift",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- 12.6 A new gift (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 104,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    },
    {
      "text": "- Summary",
      "node_level": 3,
      "part": "Part3—Maintainability",
      "chapter": "12 Advanced data validation",
      "raw_line": "- Summary (node3) **[LEAF]**",
      "is_part_intro": false,
      "id": 105,
      "chapter_info": {
        "page": 303,
        "title": "Advanced data validation",
        "pattern_matched": "Chapter 12",
        "text_preview": "13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with "
      },
      "chapter_sections": {
        "start_page": 303,
        "end_page": 333,
        "content": "\n--- Page 303 ---\n13.1 The essence of polymorphism 275\nDave How would animal look, exactly?\nTheo Like I just said, a map with two fields: name and type. Let me input that for you.\nListing13.3 Representing animals with maps\nvar myDog = {\n\"type\": \"dog\",\n\"name\": \"Fido\"\n};\nvar myCat = {\n\"type\": \"cat\",\n\"name\": \"Milo\"\n};\nvar myCow = {\n\"type\": \"cow\",\n\"name\": \"Clarabelle\"\n};\nDave Could you have given another name to the field that holds the animal type?\nTheo Absolutely. It could be anything.\nDave I see. You’re asking me the fundamental difference between your code with a\nswitch statement and my code with an interface and three classes?\nTheo Exactly.\nDave First of all, if you pass an invalid map to your greet function, bad things will\nhappen.\nTheo You’re right. Let me fix that and validate input data.\nListing13.4 Data validation\nvar animalSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nSee chapter 12 about\ndata validation for\nfunction greet(animal) {\ndetails.\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\n--- Page 304 ---\n276 CHAPTER 13 Polymorphism\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\nbreak;\ncase \"cat\":\nconsole.log(\"Meow! I am: \" + animal.name);\nbreak;\ncase \"cow\":\nconsole.log(\"Moo! Call me \" + animal.name);\nbreak;\n};\n}\n NOTE You should not use switch statements like this in your production code.\nWe use them here for didactic purposes only as a step towards distilling the essence of\npolymorphism.\nDave Another drawback of your approach is that when you want to modify the\nimplementation of greet for a specific animal, you have to change the code\nthat deals with all the animals, while in my approach, you would change only a\nspecific animal class.\nTheo I agree, and I could also fix that by having a separate function for each animal,\nsomething like this.\nListing13.5 Different implementations in different functions\nfunction greetDog(animal) {\nconsole.log(\"Woof Woof! My name is: \" + animal.name);\n}\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am: \" + animal.name);\n}\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\nfunction greet(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nswitch (animal.type) {\ncase \"dog\":\ngreetDog(animal);\nbreak;\ncase \"cat\":\ngreetCat(animal);\nbreak;\ncase \"cow\":\ngreetCow(animal);\n--- Page 305 ---\n13.2 Multimethods with single dispatch 277\nbreak;\n};\n}\nDave But what if you want to extend the functionality of greet and add a new animal?\nTheo Now you got me. I admit that with a switch statement, I can’t add a new animal\nwithout modifying the original code, whereas in OOP, I can add a new class\nwithout having to modify the original code.\nDave Yeah, but you helped me to realize that the main benefit of polymorphism is\nthat it makes the code easily extensible.\nTIP The main benefit of polymorphism is extensibility.\nTheo I’m going to ask Joe if there’s a way to benefit from polymorphism without\nobjects.\nTheo sends a message to Joe and asks him about polymorphism in DOP. Joe answers that\nhe doesn’t have time to get into a deep response because he is in a tech conference where\nhe is about to give a talk about DOP. The only thing he has time to tell Theo is that he\nshould take a look at multimethods.\nTheo and Dave read some online material about multimethods. It doesn’t look too\ncomplicated. They decide that after lunch they will give multimethods a try.\n13.2 Multimethods with single dispatch\nDuring lunch, Theo asks Dave how it feels to have grown up in the country. Dave starts\nwith an enthusiastic description about being in direct contact with nature and living a sim-\npler life than in the city. He’s grateful for the experience, but he admits that country life\ncan sometimes be hard without the conveniences of the city. But who said simple was easy?\nAfter lunch, they decide to have coffee. Dave asks Theo if he’d like to grind the coffee\nbeans himself. Theo accepts with joy. Next, Dave explains how to use a French press coffee\nmaker to get the ideal tradeoff between bitterness and rich taste. While savoring their\nFrench press coffee in the garden, Theo and Dave continue their exploration of polymor-\nphism à la DOP.\nTheo From what I read before lunch, it seems that multimethods are a software con-\nstruct that provide polymorphism without the need for objects.\nDave I don’t get how that’s possible.\nTheo Multimethods have two parts: a dispatch function and a set of methods that\nprovide an implementation for each dispatched value.\nDave I’m not sure I’m clear on that. Is a dispatch function like an interface?\nTheo It’s like an interface in the sense that it defines the way the function needs to\nbe called, but it goes beyond that. It also dispatches a value that differentiates\nbetween the different implementations.\nDave That’s a bit abstract for me.\nTheo I think I understand how to implement the animal greeting capabilities. If we\nuse a multimethod called greet, we need a dispatch function and three\nmethods. Let’s call the dispatch function greetDispatch. It dispatches the\nanimal type, either \"dog\", \"cat\", or \"cow\". Then, each dispatch value is\n--- Page 306 ---\n278 CHAPTER 13 Polymorphism\nhandled by a specific method: \"dog\" by greetDog, \"cat\" by greetCat, and\n\"cow\" by greetCow.\nTheo takes out his notebook and opens it to a blank piece of paper. He draws a diagram\nlike the one in figure 13.1.\n\"dog\" greetDog\nGreet as a dog\ngreetDispatch \"cat\" greetCat\nEmit the animal type Greet as a cat\nanimal\ntype, name \"cow\" greetCow\nGreet as a cow\nFigure 13.1 The logic flow\nof the greet multimethod\nDave Why is there an arrow between animal and the methods, in addition to the\narrows between animal and the dispatch functions?\nTheo Because the arguments of a multimethod are passed to the dispatch function\nand to the methods.\nTIP The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\nDave Arguments plural?... I see only a single argument.\nTheo You’re right. Right now our multimethod only receives a single argument, but\nsoon it will receive several arguments.\nDave I see. Could you show me how to write the code for the greet multimethod?\nTheo For that, we need a library. For instance, in JavaScript, the arrows/multi-\nmethod library provides an implementation of multimethods. Basically, we call\nmulti to create a multimethod called method to add a method.\n NOTE See http://mng.bz/nY9v for examples and documentation about this library.\nDave Where should we start?\nTheo We’ll start with multimethod initialization by creating a dispatch function\ngreetDispatch that defines the signature of the multimethod, validates the\narguments, and emits the type of the animal. Then we’ll pass greetDispatch\nto multi in order to create the greet multimethod. Our dispatch function\nwould then look like this.\nListing13.6 The dispatch function for greet multimethod\nfunction greetDispatch(animal) {\nSignature definition\nif(dev()) {\n--- Page 307 ---\n13.2 Multimethods with single dispatch 279\nif(!ajv.validate(animalSchema, animal)) {\nArgument validation\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"greet called with invalid arguments: \" + errors);\n}\n}\nDispatch value\nreturn animal.type;\n}\nMultimethod\ninitialization\nvar greet = multi(greetDispatch);\nTIP A multimethod dispatch function is responsible for three things: it defines the sig-\nnature of the multimethod, it validates the arguments, and it emits a dispatch value.\nDave What’s next?\nTheo Now we need to implement a method for each dispatched value. Let’s start\nwith the method that deals with dogs. We create a greetDog function that\nreceives an animal and then add a dog method to the greet multimethod\nusing the method function from the arrows/multimethod library. The method\nfunction receives two arguments: the dispatched value and a function that cor-\nresponds to the dispatch value.\nListing13.7 Implementation of greet method for dogs\nfunction greetDog(animal) {\nMethod\nconsole.log(\"Woof woof! My name is \" + animal.name);\nimplementation\n}\ngreet = method(\"dog\", greetDog)(greet);\nMethod declaration\nDave Does the method implementation have to be in the same module as the multi-\nmethod initialization?\nTheo No, not at all! Method declarations are decoupled from multimethod initializa-\ntion exactly like class definitions are decoupled from the interface definition.\nThat’s what make multimethods extensible.\nTIP Multimethods provides extensibility by decoupling between multimethod initial-\nization and method implementations.\nDave What about cats and cows?\nTheo We add their method implementations like we did for dogs.\nTheo takes a moment to envision the implementation. Then he codes up two more greet\nmethods for cats and cows.\nListing13.8 Implementation of greet method for cats\nfunction greetCat(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ngreet = method(\"cat\", greetCat)(greet);\n--- Page 308 ---\n280 CHAPTER 13 Polymorphism\nListing13.9 Implementation of greet method for cows\nfunction greetCow(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ngreet = method(\"cow\", greetCow)(greet);\nTIP In the context of multimethods, a method is a function that provides an imple-\nmentation for a dispatch value.\nDave Are the names of dispatch functions and methods important?\nTheo According to what I read, not really, but I like to follow a simple naming con-\nvention: use the name of the multimethod (for example, greet) as a prefix for\nthe dispatch function (for example, greetDispatch) and the methods. Then\nI’d have the Dispatch suffix for the dispatch function and a specific suffix for\neach method (for example, greetDog, greetCat, and greetCow).\nDave How does the multimethod mechanism work under the hood?\nTheo Internally, a multimethod maintains a hash map where the keys are the dis-\npatched values, and the values are the methods. When we add a method, an\nentry is added to the hash map, and when we call the multimethod, we query the\nhash map to find the implementation that corresponds to the dispatched value.\nDave I don’t think you’ve told me yet how to call a multimethod.\nTheo We call it as a regular function. Give me a minute, and I’ll show you an exam-\nple that calls a multimethod.\nListing13.10 Calling a multimethod like a regular function\ngreet(myDog);\n// → \"Woof woof! My name is Fido\"\ngreet(myCat);\n// → \"Meow! I am Milo\"\ngreet(myCow);\n// → \"Moo! Call me Clarabelle\"\nTIP Multimethods are called like regular functions.\nDave You told me earlier that in the dispatch function, we should validate the argu-\nments. Is that mandatory or is it a best practice?\nTheo It’s a best practice.\nDave What happens if the dispatch function doesn’t validate the arguments, and we\npass an invalid argument?\nTheo Like when an animal has no corresponding method?\nDave Exactly!\nTheo In that case, you’ll get an error. For instance, the arrows/multimethods library\nthrows a NoMethodError exception.\nDave That’s annoying. Is there a way to provide a default implementation?\n--- Page 309 ---\n13.3 Multimethods with multiple dispatch 281\nTheo Absolutely! In order to define a default implementation, you pass to method—\nas a single argument—the function that provides the default implementation.\nTheo writes the code and shows it to Dave. Dave then tests Theo’s code and seems satisfied\nwith the result.\nListing13.11 Defining a default implementation\nfunction greetDefault(animal) {\nconsole.log(\"My name is \" + animal.name);\n}\ngreet = method(greetDefault)(greet);\nListing13.12 Calling a multimethod when no method fits the dispatch value\nvar myHorse = {\n\"type\": \"horse\",\n\"name\": \"Horace\"\n};\ngreet(myHorse);\n// → \"My name is Horace\"\nTIP Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\nDave Cool!\n13.3 Multimethods with multiple dispatch\nTheo So far, we’ve mimicked OOP by having the type of the multimethod argument\nas a dispatch value. But if you think again about the flow of a multimethod,\nyou’ll discover something interesting. Would you like to try and draw a dia-\ngram that describes the flow of a multimethod in general?\nDave Let me get a fresh napkin. The one under my glass is a bit wet.\nTheo Uh, Dave, you can use my notebook.\nIt takes Dave a few minutes to draw a diagram like the one in figure 13.2. He pushes the\nnotebook back to Theo.\nValue1 Method1\nHandle case 1\nDispatch function Value3 Method3\nEmit a dispatch value Handle case 3\nargs\nValue2 Method2\nHandle case 2\nFigure 13.2 The logic flow\nof multimethods\n--- Page 310 ---\n282 CHAPTER 13 Polymorphism\nTheo Excellent! I hope you see that the dispatch function can emit any value.\nDave Like what?\nTheo Like emitting the type of two arguments!\nDave What do you mean?\nTheo Imagine that our animals are polyglot.\nDave Poly what?\nTheo Polyglot comes from the Greek polús, meaning much, and from glôssa, meaning\nlanguage. A polyglot is a person who can speak many languages.\nDave What languages would our animals speak?\nTheo I don’t know. Let’s say English and French.\nDave OK, and how would we represent a language in our program?\nTheo With a map, of course!\nDave What fields would we have in a language map?\nTheo Let’s keep things simple and have two fields: type and name.\nDave Like an animal map?\nTheo Not exactly. In a language map, the type field must be either fr for French or en\nfor English, whereas in the animal map, the type field is either dog, cat, or cow.\nDave Let me try to write the language map schema and the two language maps.\nTheo gladly consents; his French press coffee is getting cold! Dave writes his implementa-\ntion of the code and shows Theo.\nListing13.13 The schema of a language map\nvar languageSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"type\": \"string\"}\n},\n\"required\": [\"name\", \"type\"],\n};\nListing13.14 Two language maps\nvar french = {\n\"type\": \"fr\",\n\"name\": \"Français\"\n};\nvar english = {\n\"type\": \"en\",\n\"name\": \"English\"\n};\nTheo Excellent! Now, let’s write the code for the dispatch function and the methods\nfor our polyglot animals. Let’s call our multimethod, greetLang. We have one\ndispatch function and six methods.\n--- Page 311 ---\n13.3 Multimethods with multiple dispatch 283\nDave Right, three animals (dog, cat, and cow) times two languages (en and fr).\nBefore the implementation, I’d like to draw a flow diagram. It will help me to\nmake things crystal clear.\nTheo You need my notebook again?\nNot waiting for Dave to respond, Theo pushes his notebook across the table to Dave. Dave\ndraws a diagram like the one in figure 13.3 and slides the notebook back to Theo.\n[\"dog\", \"en\"] greetLangDogEn\nGreet as a dog in English\n[\"cat\", \"en\"] greetLangCatEn\nGreet as a cat in English\n[\"cow\", \"en\"] greetLangCowEn\nGreet as a cow in English\nargs greetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", \"fr\"] greetLangDogFr\nGreet as a dog in French\n[\"cat\", \"fr\"] greetLangCatFr\nGreet as a cat in French\n[\"cow\", \"fr\"] greetLangCowFr\nGreet as a cow in French\nFigure 13.3 The logic flow of the greetLang multimethod\nTheo Why did you omit the arrow between the arguments and the methods?\nDave In order to keep the diagram readable. Otherwise, there would be too many\narrows.\nTheo OK, I see. Are you ready for coding?\nDave Yes!\nTheo The dispatch function needs to validate its arguments and return an array with\ntwo elements: the type of animal and the type of language.\nDave types for a bit on his laptop. He initializes the multimethod with a dispatch function\nthat returns the type of its arguments and then shows the code to Theo.\nListing13.15 Initializing a multimethod with a dispatch function\nvar greetLangArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [animalSchema, languageSchema]\n};\nfunction greetLangDispatch(animal, language) {\nif(dev()) {\n--- Page 312 ---\n284 CHAPTER 13 Polymorphism\nif(!ajv.validate(greetLangArgsSchema, [animal, language])) {\nthrow (\"greetLang called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [animal.type, language.type];\n};\nvar greetLang = multi(greetLangDispatch);\nDave Does the order of the elements in the array matter?\nTheo It doesn’t matter, but it needs to be consistent with the wiring of the methods.\nThe implementation of greetLang would therefore look like this.\nListing13.16 The implementation of greetLang methods\nfunction greetLangDogEn(animal, language) {\nconsole.log(\"Woof woof! My name is \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"en\"], greetLangDogEn)(greetLang);\nfunction greetLangDogFr(animal, language) {\nconsole.log(\"Ouaf Ouaf! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"dog\", \"fr\"], greetLangDogFr)(greetLang);\nfunction greetLangCatEn(animal, language) {\nconsole.log(\"Meow! I am \" +\nanimal.name +\n\" and I speak \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"en\"], greetLangCatEn)(greetLang);\nfunction greetLangCatFr(animal, language) {\nconsole.log(\"Miaou! Je m'appelle \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cat\", \"fr\"], greetLangCatFr)(greetLang);\nfunction greetLangCowEn(animal, language) {\nconsole.log(\"Moo! Call me \" +\nanimal.name +\n\" and I speak \" +\n--- Page 313 ---\n13.3 Multimethods with multiple dispatch 285\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"en\"], greetLangCowEn)(greetLang);\nfunction greetLangCowFr(animal, language) {\nconsole.log(\"Meuh! Appelle moi \" +\nanimal.name +\n\" et je parle \" +\nlanguage.name);\n}\ngreetLang = method([\"cow\", \"fr\"], greetLangCowFr)(greetLang);\nDave looks at the code for the methods that deal with French. He is surprised to see Ouaf\nOuaf instead of Woof Woof for dogs, Miaou instead of Meow for cats, and Meuh instead of\nMoo for cows.\nDave I didn’t know that animal onomatopoeia were different in French than in\nEnglish!\nTheo Ono what?\nDave Onomatopoeia, from the Greek ónoma that means name and poiéo– that means to\nproduce. It is the property of words that sound like what they represent; for\ninstance, Woof, Meow, and Moo.\nTheo Yeah, for some reason in French, dogs Ouaf, cats Miaou, and cows Meuh.\nDave I see that in the array the animal type is always before the language type.\nTheo Right! As I told you before, in a multimethod that features multiple dispatch,\nthe order doesn’t really matter, but it has to be consistent.\nTIP Multiple dispatch is when a dispatch function emits a value that depends on more\nthan one argument. In a multimethod that features multiple dispatch, the order of\nthe elements in the array emitted by the dispatch function has to be consistent with\nthe order of the elements in the wiring of the methods.\nDave Now let me see if I can figure out how to use a multimethod that features mul-\ntiple dispatch.\nDave remembers that Theo told him earlier that multimethods are used like regular func-\ntions. With that in mind, he comes up with the code for a multimethod that features multi-\nple dispatch.\nListing13.17 Calling a multimethod that features multiple dispatch\ngreetLang(myDog, french);\n// → \"Ouaf Ouaf! Je m\\'appelle Fido et je parle Français\"\ngreetLang(myDog, english);\n// → \"Woof woof! My name is Fido and I speak English\"\ngreetLang(myCat, french);\n// → \"Miaou! Je m\\'appelle Milo et je parle Français\"\n--- Page 314 ---\n286 CHAPTER 13 Polymorphism\ngreetLang(myCat, english);\n// → \"Meow! I am Milo and I speak English\"\ngreetLang(myCow, french);\n// → \"Meuh! Appelle moi Clarabelle et je parle Français\"\ngreetLang(myCow, english);\n// → \"Moo! Call me Clarabelle and I speak English\"\nTheo Now do you agree that multimethods with multiple dispatch offer a more pow-\nerful polymorphism that OOP polymorphism?\nDave Indeed, I do.\nTheo Let me show you an even more powerful polymorphism called dynamic dis-\npatch. But first, let’s get some more of that wonderful French press coffee.\nDave Great idea! While we’re in the kitchen, I think my mom made an orange Bundt\ncake using the oranges from the grove.\n13.4 Multimethods with dynamic dispatch\nDave refills their coffee cups as Theo takes two slices from the cake and dishes them up.\nThey take their coffee and cake outside to enjoy more of the fresh country air before\nresuming their conversation.\nDave What is dynamic dispatch?\nTheo It’s when the dispatch function of a multimethod returns a value that goes\nbeyond the static type of its arguments.\nDave Like what, for example?\nTheo Like a number or a Boolean, for instance.\nDave Why would such a thing be useful?\nTheo Imagine that instead of being polyglot, our animals would suffer from\ndysmakrylexia.\nDave Suffering from what?\nTheo Dysmakrylexia. It comes from the Greek dus, expressing the idea of difficulty,\nmakrýs meaning long, and léxis meaning diction. Therefore, dysmakrylexia is dif-\nficulty pronouncing long words.\nDave I’ve never heard of that.\nTheo That’s because I just invented it.\nDave Funny. What’s considered a long word for our animals?\nTheo Let’s say that when their name has more than five letters, they’re not able to\nsay it.\nDave A bit weird, but OK.\nTheo Let’s call our multimethod dysGreet. Its dispatch function returns an array\nwith two elements: the animal type and a Boolean about whether the name is\nlong or not. Take a look at this multimethod initialization.\n--- Page 315 ---\n13.4 Multimethods with dynamic dispatch 287\nListing13.18 A multimethod using a dispatch function with dynamic dispatch\nfunction dysGreetDispatch(animal) {\nif(dev()) {\nif(!ajv.validate(animalSchema, animal)) {\nvar errors = ajv.errorsText(ajv.errors);\nthrow (\"dysGreet called with invalid arguments: \" + errors);\n}\n}\nvar hasLongName = animal.name.length > 5;\nreturn [animal.type, hasLongName];\n};\nvar dysGreet = multi(dysGreetDispatch);\nDave Writing the dysGreet methods doesn’t seem too complicated.\nAs Theo reaches over to pass Dave his notebook, he accidently hits his coffee cup. Now Theo’s\nnotebook is completely wet, and all the diagrams are soggy! Fortunately, Dave brought an\nextra napkin from the kitchen, and it’s still clean. He draws a flow diagram as in figure 13.4\nand then grabs his laptop and writes the implementation of the dysGreet methods.\n[\"dog\", true] dysGreetDogLong\nGreet as a dog mentioning name\n[\"cat\", true] dysGreetCatLong\nGreet as a cat mentioning name\n[\"cow\", true] dysGreetCowLong\nGreet as a cow mentioning name\nargs dysGreetLangDispatch\nanimal, language Emit the animal and the language types\n[\"dog\", false] dysGreetDogShort\nGreet as a dog omitting name\n[\"cat\", false] dysGreetCatShort\nGreet as a cat omitting name\n[\"cow\", false] dysGreetCowShort\nGreet as a cow omitting name\nFigure 13.4 The logic flow of the dysGreet multimethod\nListing13.19 The dysGreet methods\nfunction dysGreetDogLong(animal) {\nconsole.log(\"Woof woof! My name is \" + animal.name);\n}\ndysGreet = method([\"dog\", true], dysGreetDogLong)(dysGreet);\n--- Page 316 ---\n288 CHAPTER 13 Polymorphism\nfunction dysGreetDogShort(animal) {\nconsole.log(\"Woof woof!\");\n}\ndysGreet = method([\"dog\", false], dysGreetDogShort)(dysGreet);\nfunction dysGreetCatLong(animal) {\nconsole.log(\"Meow! I am \" + animal.name);\n}\ndysGreet = method([\"cat\", true], dysGreetCatLong)(dysGreet);\nfunction dysGreetCatShort(animal) {\nconsole.log(\"Meow!\");\n}\ndysGreet = method([\"cat\", false], dysGreetCatShort)(dysGreet);\nfunction dysGreetCowLong(animal) {\nconsole.log(\"Moo! Call me \" + animal.name);\n}\ndysGreet = method([\"cow\", true], dysGreetCowLong)(dysGreet);\nfunction dysGreetCowShort(animal) {\nconsole.log(\"Moo!\");\n}\ndysGreet = method([\"cow\", false], dysGreetCowShort)(dysGreet);\nTheo checks that the code works as expected. He compliments Dave, not only on the\nmethod implementation but also for having the foresight to grab an extra napkin.\nListing13.20 Testing dysGreet\ndysGreet(myDog);\ndysGreet(myCow);\ndysGreet(myCat);\n//\"Woof woof!\"\n//\"Moo! Call me Clarabelle\"\n//\"Meow!\"\nTheo Well done, my friend! Our exploration of multimethods has come to an end. I\nthink it’s time for me to drive back if I want to get home before dark and beat\nthe rush hour traffic.\nDave Before you leave, let’s check if multimethods are available in programming\nlanguages other than JavaScript.\nTheo That’s a question for Joe.\nDave Do you think it’s OK if I call him now?\nTheo I think it’s probably better if you send him an email. He’s in a tech conference,\nand I’m not sure if it’s all day. Thank you for this beautiful day in the country\nand the wonderful refreshments.\nDave I enjoyed it, also, especially our discussions about etymology. I think there are\nsome oranges for you to take home and enjoy later.\nTheo Great! I can’t wait until my wife tries one.\n--- Page 317 ---\n13.5 Integrating multimethods in a production system 289\nAfter Theo leaves, Dave sends Joe an email. A few minutes later, Dave receives an email\nfrom Joe with the subject, “Support for multimethods in different languages.”\nSupport for multimethods in different languages\nPython has a library called multimethods (https://github.com/weissjeffm/multimeth-\nods), and Ruby has one called Ruby multimethods (https://github.com/psantacl/\nruby-multimethods). Both seem to work quite like the JavaScript arrows/multi-\nmethod library.\nIn Java, there is the Java Multimethod Framework (http://igm.univ-mlv.fr/~forax/\nworks/jmmf/), and C# supports multimethods natively via the dynamic keyword.\nHowever, in both Java and C#, multimethods work only with static data types and not\nwith generic data structures.\nGeneric data structure\nLanguage URL\nsupport\nJavaScript https://github.com/caderek/arrows/tree/master/ Yes\npackages/multimethod\nJava http://igm.univ-mlv.fr/~forax/works/jmmf/ No\nC# Native support No\nPython https://github.com/weissjeffm/multimethods Yes\nRuby https://github.com/psantacl/ruby-multimethods Yes\n13.5 Integrating multimethods in a production system\nWhile Theo is driving back home, his thoughts take him back to the fresh air of the coun-\ntry. This pleasant moment is interrupted by a phone call from Nancy at Klafim.\nNancy How are you doing?\nTheo Fine. I’m driving back from the countryside.\nNancy Cool. Are you available to talk about work?\nTheo Sure.\nNancy I’d like to add a tiny feature to the catalog.\nIn the past, when Nancy qualified a feature as tiny, it scared Theo because tiny turned into\nhuge. What seemed easy to her always took him a surprising amount of time to develop.\nBut after refactoring the system according to DOP principles, now what seems tiny to\nNancy is usually quite easy to implement.\nTheo What feature?\nNancy I’d like to allow librarians to view the list of authors, ordered by last name, in\ntwo formats: HTML and Markdown.\n--- Page 318 ---\n290 CHAPTER 13 Polymorphism\nTheo It doesn’t sound too complicated.\nNancy Also, I need a bit of text formatting.\nTheo What kind of text formatting?\nNancy Depending on the number of books an author has written, their name should\nbe in bold and italic fonts.\nTheo Could you send me an email with all the details. I’ll take a look at it tomorrow\nmorning.\nNancy Perfect. Have a safe drive!\nBefore going to bed, Theo reflects about today’s etymology lessons. He realizes that he\nnever looked for the etymology of the word etymology itself! He searches for the term etymol-\nogy online and learns that the word etymology derives from the Greek étumon, meaning true\nsense, and the suffix logia, denoting the study of. During the night, Theo dreams of dogs,\ncats, and cows programming on their laptops in a field of grass.\nWhen Theo arrives at the office the next day, he opens Nancy’s email with the details\nabout the text formatting feature. The details are summarized in table 13.1.\nTable 13.1 Text formatting for author names according to the number of books\nthey have written\nNumber of books Italic Bold\n10 or fewer Yes No\nBetween 11 and 50 No Yes\n51 or more Yes Yes\nTheo forwards Nancy’s email to Dave and asks him to take care of this task. Delegating\nresponsibility, after all, is the trait of a great manager.\nDave thinks the most difficult part of the feature lies in implementing an Author\n.myName(author, format) function that receives two arguments: the author data and the\ntext format. He asks himself whether he can implement this function as a multimethod\nand use what he learned yesterday with Theo at his parents’ home in the country. It seems\nthat this feature is quite similar to the one that dealt with dysmakrylexia. Instead of check-\ning the length of a string, he needs to check the length of an array.\nFirst, Dave needs a data schema for the text format. He could represent a format as a\nmap with a type field like Theo did yesterday for languages, but at the moment, it seems\nsimpler to represent a format as a string that could be either markdown or html. He comes\nup with the text format schema in listing 13.21. He already wrote the author schema with\nTheo last week. It’s in listing 13.22.\nListing13.21 The text format schema\nvar textFormatSchema = {\n\"name\": {\"type\": \"string\"},\n\"type\": {\"enum\": [\"markdown\", \"html\"]}\n};\n--- Page 319 ---\n13.5 Integrating multimethods in a production system 291\nListing13.22 The author schema\nvar authorSchema = {\n\"type\": \"object\",\n\"required\": [\"name\", \"bookIsbns\"],\n\"properties\": {\n\"name\": {\"type\": \"string\"},\n\"bookIsbns\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n}\n};\nNow, Dave needs to write a dispatch function and initialize the multimethod. Remember-\ning that Theo had no qualms about creating the word dysmakrylexia, he decides that he\nprefers his own neologism, prolificity, over the existing nominal form prolificness. He finds it\nuseful to have an Author.prolificityLevel helper function that returns the level of\nprolificity of the author: either low, medium, or high. Now he’s ready to code the author-\nNameDispatch function.\nListing13.23 Author.myName multimethod initialization\nAuthor.prolificityLevel = function(author) {\nvar books = _.size(_.get(author, \"bookIsbns\"));\nif (books <= 10) {\nreturn \"low\";\n};\nif (books >= 51) {\nreturn \"high\";\n}\nreturn \"medium\";\n};\nvar authorNameArgsSchema = {\n\"type\": \"array\",\n\"prefixItems\": [\nauthorSchema,\n{\"enum\": [\"markdown\", \"html\"]}\n]\n};\nfunction authorNameDispatch(author, format) {\nif(dev()) {\nif(!ajv.validate(authorNameArgsSchema, [author, format])) {\nthrow (\"Author.myName called with invalid arguments: \" +\najv.errorsText(ajv.errors));\n}\n}\nreturn [Author.prolificityLevel(author), format];\n};\nAuthor.myName = multi(authorNameDispatch);\n--- Page 320 ---\n292 CHAPTER 13 Polymorphism\nThen Dave works on the methods: first, the HTML format methods. In HTML, bold text is\nwrapped inside a <b> tag, and italic text is wrapped in a <i> tag. For instance, in HTML,\nthree authors with different levels of prolificity would be written like this.\nListing13.24 Examples of bold and italic in HTML\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n<i>Yehonathan Sharvit<i>\nBold and italic formatting\n<b>Stephen Covey</b>\nfor highly prolific authors\n<b><i>Isaac Asimov</i></b>\nWith this information in hand, Dave writes the three methods that deal with HTML for-\nmatting. Easy!\nListing13.25 The methods that deal with HTML formatting\nfunction authorNameLowHtml(author, format) {\nreturn \"<i>\" + _.get(author, \"name\") + \"</i>\";\n}\nAuthor.myName = method([\"low\", \"html\"], authorNameLowHtml)(Author.myName);\nfunction authorNameMediumHtml(author, format) {\nreturn \"<b>\" + _.get(author, \"name\") + \"</b>\";\n}\nAuthor.myName =\nmethod([\"medium\", \"html\"], authorNameMediumHtml)(Author.myName);\nfunction authorNameHighHtml(author, format) {\nreturn \"<b><i>\" + _.get(author, \"name\") + \"</i></b>\";\n}\nAuthor.myName =\nmethod([\"high\", \"html\"], authorNameHighHtml)(Author.myName);\nThen, Dave moves on to the three methods that deal with Markdown formatting. In\nMarkdown, bold text is wrapped in two asterisks, and italic text is wrapped in a single\nasterisk. For instance, in Markdown, three authors with different levels of prolificity\nwould be written like the code in listing 13.26. The code for the Markdown methods is in\nlisting 13.27.\nListing13.26 Examples of bold and italic in Markdown\nItalic formatting for Bold formatting for\nminimally prolific authors moderately prolific authors\n*Yehonathan Sharvit*\nBold and italic formatting\n**Stephen Covey**\nfor highly prolific authors\n***Isaac Asimov***\n--- Page 321 ---\n13.5 Integrating multimethods in a production system 293\nListing13.27 The methods that deal with Markdown formatting\nfunction authorNameLowMarkdown(author, format) {\nreturn \"*\" + _.get(author, \"name\") + \"*\";\n}\nAuthor.myName =\nmethod([\"low\", \"markdown\"], authorNameLowMarkdown)(Author.myName);\nfunction authorNameMediumMarkdown(author, format) {\nreturn \"**\" + _.get(author, \"name\") + \"**\";\n}\nAuthor.myName =\nmethod([\"medium\", \"markdown\"], authorNameMediumMarkdown)(Author.myName);\nfunction authorNameHighMarkdown(author, format) {\nreturn \"***\" + _.get(author, \"name\") + \"***\";\n}\nAuthor.myName =\nmethod([\"high\", \"markdown\"], authorNameHighMarkdown)(Author.myName);\nDave decides to test his code by involving a mysterious author. Listing 13.28 and listing 13.29\nshow the tests.\nListing13.28 Testing HTML formatting\nvar yehonathan = {\n\"name\": \"Yehonathan Sharvit\",\n\"bookIsbns\": [\"9781617298578\"]\n};\nAuthor.myName(yehonathan, \"html\");\n// → \"<i>Yehonathan Sharvit</i>\"\nListing13.29 Testing Markdown formatting\nAuthor.myName(yehonathan, \"markdown\");\n// → \"*Yehonathan Sharvit*\"\nTheo shows up at Dave’s desk and asks to review Dave’s implementation of the list of\nauthors feature. Curious, Theo asks Dave about the author that appears in the test of\nAuthor.myName.\nTheo Who is Yehonathan Sharvit?\nDave I don’t really know. The name appeared when I googled “data-oriented pro-\ngramming” yesterday. He wrote a book on the topic. I thought it would be cool\nto use its ISBN in my test.\n--- Page 322 ---\n294 CHAPTER 13 Polymorphism\nSummary\n The main benefit of polymorphism is extensibility.\n Multimethods make it possible to benefit from polymorphism when data is repre-\nsented with generic maps.\n A multimethod is made of a dispatch function and multiple methods.\n The dispatch function of a multimethod emits a dispatch value.\n Each of the methods used in a multimethod provides an implementation for a\nspecific dispatch value.\n Multimethods can mimic OOP class inheritance via single dispatch.\n In single dispatch, a multimethod receives a single map that contains a type field,\nand the dispatch function of the multimethod emits the value of the type field.\n In addition to single dispatch, multimethods provide two kinds of advanced\npolymorphisms: multiple dispatch and dynamic dispatch.\n Multiple dispatch is used when the behavior of the multimethod depends on\nmultiple arguments.\n Dynamic dispatch is used when the behavior of the multimethod depends on run-\ntime arguments.\n The arguments of a multimethod are passed to the dispatch function and to the\nmethods.\n A multimethod dispatch function is responsible for\n– Defining the signature.\n– Validating the arguments.\n– Emitting a dispatch value.\n Multimethods provides extensibility by decoupling between multimethod ini-\ntialization and method implementations.\n Multimethods are called like regular functions.\n Multimethods support default implementations that are called when no method\ncorresponds to the dispatch value.\n In a multimethod that features multiple dispatch, the order of the elements in\nthe array emitted by the dispatch function has to be consistent with the order of\nthe elements in the wiring of the methods.\nLodash functions introduced in this chapter\nFunction Description\nsize(coll) Gets the size of coll\n--- Page 323 ---\nAdvanced data\nmanipulation\nWhatever is well-conceived\nis clearly said\nThis chapter covers\n Manipulating nested data\n Writing clear and concise code for business\nlogic\n Separating business logic and generic data\nmanipulation\n Building custom data manipulation tools\n Using the best tool for the job\nWhen our business logic involves advanced data processing, the generic data manip-\nulation functions provided by the language run time and by third-party libraries\nmight not be sufficient. Instead of mixing the details of data manipulation with\nbusiness logic, we can write our own generic data manipulation functions and imple-\nment our custom business logic using them. Separating business logic from the inter-\nnal details of data manipulation makes the business logic code concise and easy to\nread for other developers.\n295\n--- Page 324 ---\n296 CHAPTER 14 Advanced data manipulation\n14.1 Updating a value in a map with eloquence\nDave is more and more autonomous on the Klafim project. He can implement most fea-\ntures on his own, typically turning to Theo only for code reviews. Dave’s code quality stan-\ndards are quite high. Even when his code is functionally solid, he tends to be unsatisfied\nwith its readability. Today, he asks for Theo’s help in improving the readability of the code\nthat fixes a bug Theo introduced a long time ago.\nDave I think I have a found a bug in the code that returns book information from\nthe Open Library API.\nTheo What bug?\nDave Sometimes, the API returns duplicate author names, and we pass the dupli-\ncates through to the client.\nTheo It doesn’t sound like a complicated bug to fix.\nDave Right, I fixed it, but I’m not satisfied with the readability of the code I wrote.\nTheo Being critical of our own code is an important quality for a developer to prog-\nress. What is it exactly that you don’t like?\nDave Take a look at this code.\nListing14.1 Removing duplicates in a straightforward but tedious way\nfunction removeAuthorDuplicates(book) {\nvar authors = _.get(book, \"authors\");\nvar uniqAuthors = _.uniq(authors);\nreturn _.set(book,\"authors\", uniqAuthors);\n}\nDave I’m using _.get to retrieve the array with the author names, then _.uniq to\ncreate a duplicate-free version of the array, and finally, _.set to create a new\nversion of the book with no duplicate author names.\nTheo The code is tedious because the next value of authorNames needs to be based\non its current value.\nDave But it’s a common use case! Isn’t there a simpler way to write this kind of code?\nTheo Your astonishment definitely honors you as a developer, Dave. I agree with you\nthat there must be a simpler way. Let me phone Joe and see if he’s available for\na conference call.\nJoe How’s it going, Theo?\nTheo Great! Are you back from your tech conference?\nJoe I just landed. I’m on my way home now in a taxi.\nTheo How was your talk about DOP?\nJoe Pretty good. At the beginning people were a bit suspicious, but when I told\nthem the story of Albatross and Klafim, it was quite convincing.\nTheo Yeah, adults are like children in that way; they love stories.\nJoe What about you? Did you manage to achieve polymorphism with multimethods?\nTheo Yes! Dave even managed to implement a feature in Klafim with multimethods.\nJoe Cool!\n--- Page 325 ---\n14.1 Updating a value in a map with eloquence 297\nTheo Do you have time to help Dave with a question about programming?\nJoe Sure.\nDave Hi Joe. How are you doing?\nJoe Hello Dave. Not bad. What kind of help do you need?\nDave I’m wondering if there’s a simpler way to remove duplicates inside an array\nvalue in a map. Using _.get, _.uniq, and _.set looks quite tedious.\nJoe You should build your own data manipulation tools.\nDave What do you mean?\nJoe You should write a generic update function that updates a value in a map,\napplying a calculation based on its current value.1\nDave What would the arguments of update be in your opinion?\nJoe Put the cart before the horse.\nDave What?!\nJoe Rewrite your business logic as if update were already implemented, and you’ll\ndiscover what the arguments of update should be.\nDave I see what you mean: the horse is the implementation of update, and the cart is\nthe usage of update.\nJoe Exactly. But remember, it’s better if you keep your update function generic.\nDave How?\nJoe By not limiting it to your specific use case.\nDave I see. The implementation of update should not deal with removing duplicate\nelements. Instead, it should receive the updating function—in my case,\n_.uniq—as an argument.\nJoe Exactly! Uh, sorry Dave, I gotta go, I just got home. Good luck!\nDave Take care, Joe, and thanks!\nDave ends the conference call. Looking at Theo, he reiterates the conversation with Joe.\nDave Joe advised me to write my own update function. For that purpose, he told me\nto start by rewriting removeAuthorDuplicates as if update were already\nimplemented. That will allow us to make sure we get the signature of update\nright.\nTheo Sounds like a plan.\nDave Joe called it “putting the cart before the horse.”\nTheo Joe and his funny analogies...\nTIP The best way to find the signature of a custom data manipulation function is to\nthink about the most convenient way to use it.\nDave Anyway, the way I’d like to use update inside removeAuthorDuplicates is\nlike this.\n1 Lodash provides an implementation of update, but for the sake of teaching, we are writing our own imple-\nmentation.\n--- Page 326 ---\n298 CHAPTER 14 Advanced data manipulation\nListing14.2 The code that removes duplicates in an elegant way\nfunction removeAuthorDuplicates(book) {\nreturn update(book, \"authors\", _.uniq);\n}\nTheo Looks good to me!\nDave Wow! Now the code with update is much more elegant than the code with\n_.get and _.set!\nTheo Before you implement update, I suggest that you write down in plain English\nexactly what the function does.\nDave It’s quite easy: update receives a map called map, a path called path, and a\nfunction called fun. It returns a new version of map, where path is associated\nwith fun(currentValue), and currentValue is the value associated with\npath in map.\nThinking out loud, Dave simultaneously draws a diagram like that in figure 14.1. Theo is\nbecoming more and more impressed with his young protegé as he studies the figure.\n{\n\"position\" : \"manager\", \"income\"\n\"income\" : 100000\n} map fun path\nupdate\n{\n\"position\" : \"manager\",\n\"income\" : fun(100000)\nres Figure 14.1 The\n}\nbehavior of update\nTIP Before implementing a custom data manipulation function, formulate in plain\nEnglish exactly what the function does.\nTheo With such a clear definition, it’s going to be a piece of cake to implement\nupdate!\nAfter a few minutes, Dave comes up with the code. It doesn’t take long because the plain-\nEnglish diagram helps him to organize the code.\nListing14.3 A generic update function\nfunction update(map, path, fun) {\nvar currentValue = _.get(map, path);\nvar nextValue = fun(currentValue);\nreturn _.set(map, path, nextValue);\n}\n--- Page 327 ---\n14.2 Manipulating nested data 299\nTheo Why don’t you see if it works with a simple case such as incrementing a number\nin a map?\nDave Good idea! I’ll try multiplying a value in a map by 2 with update. How’s this\nlook?\nListing14.4 Multiplying a value in a map by 2\nvar m = {\n\"position\": \"manager\",\n\"income\": 100000\n};\nupdate(m, \"income\", function(x) {\nreturn x * 2;\n});\n// → {\"position\": \"manager\", \"income\": 200000}\nTheo Great! It seems to work.\n14.2 Manipulating nested data\nThe next Monday, during Theo and Dave’s weekly sync meeting, they discuss the upcom-\ning features for Klafim. Theo fondly remembers another Monday where they met at Dave’s\nfamily home in the country. Coming back to the present moment, Theo begins.\nTheo Recently, Nancy has been asking for more and more administrative features.\nDave Like what?\nTheo I’ll give you a few examples.... Let me find the email I got from Nancy yesterday.\nDave OK.\nTheo Here it is. There are three feature requests for now: listing all the book author\nIDs, calculating the book lending ratio, and grouping books by a physical library.\nDave What feature should I tackle first?\nTheo It doesn’t matter, but you should deliver the three of these before the end of\nthe week. Good luck, and don’t hesitate to call me if you need help.\nOn Tuesday, Dave asks for Theo’s help. Dave is not pleased with how his code looks.\nDave I started to work on the three admin features, but I don’t like the code I wrote.\nLet me show you the code for retrieving the list of author IDs from the list of\nbooks returned from the database.\nTheo Can you remind me what an element in a book list returned from the database\nlooks like?\nDave Each book is a map with an authorIds array field.\nTheo OK, so it sounds like a map over the books should do it.\nDave This is what I did, but it doesn’t work as expected. Here’s my code for listing\nthe book author IDs.\n--- Page 328 ---\n300 CHAPTER 14 Advanced data manipulation\nListing14.5 Retrieving the author IDs in books as an array of arrays\nfunction authorIdsInBooks(books) {\nreturn _.map(books, \"authorIds\");\n}\nTheo What’s the problem?\nDave The problem is that it returns an array of arrays of author IDs instead of an\narray of author IDs. For instance, when I run authorIdsInBooks on a catalog\nwith two books, I get this result.\nListing14.6 The author IDs in an array of arrays\n[\n[\"sean-covey\", \"stephen-covey\"],\n[\"alan-moore\", \"dave-gibbons\"]\n]\nTheo That’s not a big problem. You can flatten an array of arrays with _.flatten,\nand you should get the result you expect.\nDave Nice! This is exactly what I need! Give me a moment to fix the code of\nauthorIdsInBooks. . . here you go.\nListing14.7 Retrieving the author IDs in books as an array of strings\nfunction authorIdsInBooks(books) {\nreturn _.flatten(_.map(books, \"authorIds\"));\n}\nTheo Don’t you think that mapping and then flattening deserves a function of its own?\nDave Maybe. It’s quite easy to implement a flatMap function.2 How about this?\nListing14.8 The implementation of flatMap\nfunction flatMap(coll, f) {\nreturn _.flatten(_.map(coll,f));\n}\nTheo Nice!\nDave I don’t know.... It’s kind of weird to have such a small function.\nTheo I don’t think that code size is what matters here.\nDave What do you mean?\nTheo See what happens when you rewrite authorIdsInBooks using flatMap.\nDave OK, here’s how I’d use flatMap to list the author IDs.\n2 Lodash provides an implementation of flatMap, but for the sake of teaching, we are writing our own\nimplementation.\n--- Page 329 ---\n14.3 Using the best tool for the job 301\nListing14.9 Retrieving the author IDs as an array of strings using flatMap\nfunction authorIdsInBooks(books) {\nreturn flatMap(books, \"authorIds\");\n}\nTheo What implementation do you prefer, the one with flatten and map (in listing\n14.7) or the one with flatMap (in listing 14.9)?\nDave I don’t know. To me, they look quite similar.\nTheo Right, but which implementation is more readable?\nDave Well, assuming I know what flatMap does, I would say the implementation\nwith flatMap. Because it’s more concise, it is a bit more readable.\nTheo Again, it’s not about the size of the code. It’s about the clarity of intent and the\npower of naming things.\nDave I don’t get that.\nTheo Let me give you an example from our day-to-day language.\nDave OK.\nTheo Could you pass me that thing on your desk that’s used for writing?\nIt takes Dave a few seconds to get that Theo has asked him to pass the pen on the desk.\nAfter he passes Theo the pen, he asks:\nDave Why didn’t you simply ask for the pen?\nTheo I wanted you to experience how it feels when we use descriptions instead of\nnames to convey our intent.\nDave Oh, I see. You mean that once we use a name for the operation that maps and\nflattens, the code becomes clearer.\nTheo Exactly.\nDave Let’s move on to the second admin feature: calculating the book lending ratio.\nTheo Before that, I think we deserve a short period for rest and refreshments, where\nwe drink a beverage made by percolation from roasted and ground seeds.\nDave A coffee break!\n14.3 Using the best tool for the job\nAfter the coffee break, Dave shows Theo his implementation of the book lending ratio cal-\nculation. This time, he seems to like the code he wrote.\nDave I’m quite proud of the code I wrote to calculate the book lending ratio.\nTheo Show me the money!\nDave My function receives a list of books from the database like this.\nListing14.10 A list of two books with bookItems\n[\n{\n\"isbn\": \"978-1779501127\",\n--- Page 330 ---\n302 CHAPTER 14 Advanced data manipulation\n\"title\": \"Watchmen\",\n\"bookItems\": [\n{\n\"id\": \"book-item-1\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": true\n}\n]\n},\n{\n\"isbn\": \"978-1982137274\",\n\"title\": \"7 Habits of Highly Effective People\",\n\"bookItems\": [\n{\n\"id\": \"book-item-123\",\n\"libId\": \"hudson-park-lib\",\n\"isLent\": true\n},\n{\n\"id\": \"book-item-17\",\n\"libId\": \"nyc-central-lib\",\n\"isLent\": false\n}\n]\n}\n]\nTheo Quite a nested piece of data!\nDave Yeah, but now that I’m using flatMap, calculating the lending ratio is quite\neasy. I’m going over all the book items with forEach and incrementing either\nthe lent or the notLent counter. At the end, I return the ratio between lent\nand (lent + notLent). Here’s how I do that.\nListing14.11 Calculating the book lending ratio using forEach\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar lent = 0;\nvar notLent = 0;\n_.forEach(bookItems, function(item) {\nif(_.get(item, \"isLent\")) {\nlent = lent + 1;\n} else {\nnotLent = notLent + 1;\n}\n});\nreturn lent/(lent + notLent);\n}\nTheo Would you allow me to tell you frankly what I think of your code?\nDave If you are asking this question, it means that you don’t like it. Right?\nTheo It’s nothing against you; I don’t like any piece of code with forEach.\n--- Page 331 ---\n14.3 Using the best tool for the job 303\nDave What’s wrong with forEach?\nTheo It’s too generic!\nDave I thought that genericity was a positive thing in programming.\nTheo It is when we build a utility function, but when we use a utility function, we\nshould use the least generic function that solves our problem.\nDave Why?\nTheo Because we ought to choose the right tool for the job, like in the real life.\nDave What do you mean?\nTheo Let me give you an example. Yesterday, I had to clean my drone from the\ninside. Do you think that I used a screwdriver or a Swiss army knife to unscrew\nthe drone cover?\nDave A screwdriver, of course! It’s much more convenient to manipulate.\nTheo Right. Also, imagine that someone looks at me using a screwdriver. It’s quite\nclear to them that I am turning a screw. It conveys my intent clearly.\nDave Are you saying that forEach is like the Swiss army knife of data manipulation?\nTheo That’s a good way to put it.\nTIP Pick the least generic utility function that solves your problem.\nDave What function should I use then, to iterate over the book item collection?\nTheo You could use _.reduce.\nDave I thought reduce was about returning data from a collection. Here, I don’t\nneed to return data; I need to update two variables, lent and notLent.\nTheo You could represent those two values in a map with two keys.\nDave Can you show me how to rewrite my lendingRatio function using reduce?\nTheo Sure. The initial value passed to reduce is the map, {\"lent\": 0, \"notLent\": 0},\nand inside each iteration, we update one of the two keys, like this.\nListing14.12 Calculating the book lending ratio using reduce\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = _.reduce(bookItems, function(res, item) {\nif(_.get(item, \"isLent\")) {\nres.lent = res.lent + 1;\n} else {\nres.notLent = res.notLent + 1;\n}\nreturn res;\n}, {notLent: 0, lent:0});\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nDave Instead of updating the variables lent and notLent, now we are updating lent\nand notLent map fields. What’s the difference?\n--- Page 332 ---\n304 CHAPTER 14 Advanced data manipulation\nTheo Dealing with map fields instead of variables allows us to get rid of reduce in\nour business logic code.\nDave How could you iterate over a collection without forEach and without reduce?\nTheo I can’t avoid the iteration over a collection, but I can hide reduce behind a\nutility function. Take a look at the way reduce is used inside the code of\nlendingRatio. What is the meaning of the reduce call?\nDave looks at the code in listing 14.12. He thinks for a long moment before he answers.\nDave I think it’s counting the number of times isLent is true and false.\nTheo Right. Now, let’s use Joe’s advice about building our own data manipulation\ntool.\nDave How exactly?\nTheo I suggest that you write a countByBoolField utility function that counts the\nnumber of times a field is true and false.\nDave OK, but before implementing this function, let me first rewrite the code of\nlendingRatio, assuming this function already exists.\nTheo You are definitely a fast learner, Dave!\nDave Thanks! I think that by using countByBoolField, the code for calculating the\nlending ratio using a custom utility function would be something like this.\nListing14.13 Calculating the book lending ratio\nfunction lendingRatio(books) {\nvar bookItems = flatMap(books, \"bookItems\");\nvar stats = countByBoolField(bookItems, \"isLent\", \"lent\", \"notLent\");\nreturn stats.lent/(stats.lent + stats.notLent);\n}\nTIP Don’t use _.reduce or any other low-level data manipulation function inside\ncode that deals with business logic. Instead, write a utility function—with a proper\nname—that hides _.reduce.\nTheo Perfect. Don’t you think that this code is clearer than the code using _.reduce?\nDave I do! The code is both more concise and the intent is clearer. Let me see if I\ncan implement countByBoolField now.\nTheo I suggest that you write a unit test first.\nDave Good idea.\nDave types for a bit. When he’s satisfied, he shows Theo the result.\nListing14.14 A unit test for countByBoolField\nvar input = [\n{\"a\": true},\n{\"a\": false},\n{\"a\": true},\n--- Page 333 ---\n14.4 Unwinding at ease 305\n{\"a\": true}\n];\nvar expectedRes = {\n\"aTrue\": 3,\n\"aFalse\": 1\n};\n_.isEqual(countByBoolField(input, \"a\", \"aTrue\", \"aFalse\"), expectedRes);\nTheo Looks good to me. Now, for the implementation of countByBoolField, I\nthink you are going to need our update function.\nDave I think you’re right. On each iteration, I need to increment the value of either\naTrue or aFalse using update and a function that increments a number by 1.\nAfter a few minutes of trial and error, Dave comes up with the piece of code that uses\nreduce, update, and inc. He shows Theo the code for countByBoolField.\nListing14.15 The implementation of countByBoolField\nfunction inc (n) {\nreturn n + 1;\n}\nfunction countByBoolField(coll, field, keyTrue, keyFalse) {\nreturn _.reduce(coll, function(res, item) {\nif (_.get(item, field)) {\nreturn update(res, keyTrue, inc);\n}\nreturn update(res, keyFalse, inc);\n}, {[keyTrue]: 0,\nCreates a map with\n[keyFalse]: 0});\nkeyTrue and keyFalse\n}\nassociated to 0\nTheo Well done! Shall we move on and review the third admin feature?\nDave The third feature is more complicated. I would like to use the teachings from\nthe first two features for the implementation of the third feature.\nTheo OK. Call me when you’re ready for the code review.\n14.4 Unwinding at ease\nDave really struggled with the implementation of the last admin feature, grouping books\nby a physical library. After a couple of hours of frustration, Dave calls Theo for a rescue.\nDave I really had a hard time implementing the grouping by library feature.\nTheo I only have a couple of minutes before my next meeting, but I can try to help\nyou. What’s the exact definition of grouping by library?\nDave Let me show you the unit test I wrote.",
        "sections_found": []
      },
      "accurate_page_range": "303-333"
    }
  ]
}