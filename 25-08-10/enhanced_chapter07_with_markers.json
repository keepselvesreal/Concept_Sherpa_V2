[
  {
    "id": 66,
    "title": "7 Introduction",
    "level": 2,
    "start_text": "## 7 Introduction\n",
    "end_text": "\n---\n",
    "content": "7 Introduction에 대한 콘텐츠",
    "formatted_section": "## 7 Introduction\n7 Introduction에 대한 콘텐츠\n---\n"
  },
  {
    "id": 67,
    "title": "7.1 Data validation in DOP",
    "level": 2,
    "start_text": "## 7.1 Data validation in DOP\n",
    "end_text": "\n---\n",
    "content": "7.1 Data validation in DOP\nTheo has rescheduled his meetings. With such an imposing deadline, he’s still not sure if\nhe’s made a big mistake giving DOP a second chance.\n NOTE The reason why Theo rescheduled his meetings is explained in the opener\nfor part 2. Take a moment to read the opener if you missed it.\nJoe What aspect of OOP do you think you will miss the most in your big project?\nTheo Data validation.\nJoe Can you elaborate a bit?\nTheo In OOP, I have this strong guarantee that when a class is instantiated, its mem-\nber fields have the proper names and proper types. But with DOP, it’s so easy\nto have small mistakes in field names and field types.\nJoe Well, I have good news for you! There is a way to validate data in DOP.\nTheo How does it work? I thought DOP and data validation were two contradictory\nconcepts!\nJoe Not at all. It’s true that DOP doesn’t force you to validate data, but it doesn’t\nprevent you from doing so. In DOP, the data schema is separate from the data\nrepresentation.\nTheo I don’t get how that would eliminate data consistency issues.\nJoe According to DOP, the most important data to validate is data that crosses the\nboundaries of the system.\nTheo Which boundaries are you referring to?\nJoe In the case of a web server, it would be the areas where the web server commu-\nnicates with its clients and with its data sources.\nTheo A diagram might help me see it better.\nJoe goes to the whiteboard and picks up the pen. He then draws a diagram like the one in\nfigure 7.1.\nClient (e.g., web browser)\nData\nWeb server\nData Data\nWeb service Database Figure 7.1 High-level architecture of\na modern web server",
    "formatted_section": "## 7.1 Data validation in DOP\n7.1 Data validation in DOP\nTheo has rescheduled his meetings. With such an imposing deadline, he’s still not sure if\nhe’s made a big mistake giving DOP a second chance.\n NOTE The reason why Theo rescheduled his meetings is explained in the opener\nfor part 2. Take a moment to read the opener if you missed it.\nJoe What aspect of OOP do you think you will miss the most in your big project?\nTheo Data validation.\nJoe Can you elaborate a bit?\nTheo In OOP, I have this strong guarantee that when a class is instantiated, its mem-\nber fields have the proper names and proper types. But with DOP, it’s so easy\nto have small mistakes in field names and field types.\nJoe Well, I have good news for you! There is a way to validate data in DOP.\nTheo How does it work? I thought DOP and data validation were two contradictory\nconcepts!\nJoe Not at all. It’s true that DOP doesn’t force you to validate data, but it doesn’t\nprevent you from doing so. In DOP, the data schema is separate from the data\nrepresentation.\nTheo I don’t get how that would eliminate data consistency issues.\nJoe According to DOP, the most important data to validate is data that crosses the\nboundaries of the system.\nTheo Which boundaries are you referring to?\nJoe In the case of a web server, it would be the areas where the web server commu-\nnicates with its clients and with its data sources.\nTheo A diagram might help me see it better.\nJoe goes to the whiteboard and picks up the pen. He then draws a diagram like the one in\nfigure 7.1.\nClient (e.g., web browser)\nData\nWeb server\nData Data\nWeb service Database Figure 7.1 High-level architecture of\na modern web server\n---\n"
  },
  {
    "id": 68,
    "title": "7.2 JSON Schema in a nutshell",
    "level": 2,
    "start_text": "## 7.2 JSON Schema in a nutshell\n",
    "end_text": "\n---\n",
    "content": "7.2 JSON Schema in a nutshell 143\nJoe This architectural diagram defines what we call the boundaries of the system in\nterms of data exchange. Can you tell me what the three boundaries of the sys-\ntem are?\n NOTE The boundaries of a system are defined as the areas where the system exchanges\ndata.\nTheo Let me see. The first one is the client boundary, then we have the database\nboundary, and finally, the web service boundary.\nJoe Exactly! It’s important to identify the boundaries of a system because, in\nDOP, we differentiate between two kinds of data validation: validation that\noccurs at the boundaries of the system and validation that occurs inside the\nsystem. Today, we’re going to focus on validation that occurs at the boundar-\nies of the system.\nTheo Does that mean data validation at the boundaries of the system is more\nimportant?\nJoe Absolutely! Once you’ve ensured that data going into and out of the system is\nvalid, the odds for an unexpected piece of data inside the system are pretty low.\nTIP When data at system boundaries is validated, it’s not critical to validate data\nagain inside the system.\nTheo Why do we need data validation inside the system then?\nJoe It has to do with making it easier to code your system as your code base grows.\nTheo And, what’s the main purpose of data validation at the boundaries?\nJoe To prevent invalid data from going in and out of the system, and to display\ninformative errors when we encounter invalid data. Let me draw a table on the\nwhiteboard so you can see the distinction (table 7.1).\nTable 7.1 Two kinds of data validation\nKind of data validation Purpose Environment\nBoundaries Guardian Production\nInside Ease of development Dev\nTheo When will you teach me about data validation inside the system?\nJoe Later, when the code base is bigger.",
    "formatted_section": "## 7.2 JSON Schema in a nutshell\n7.2 JSON Schema in a nutshell 143\nJoe This architectural diagram defines what we call the boundaries of the system in\nterms of data exchange. Can you tell me what the three boundaries of the sys-\ntem are?\n NOTE The boundaries of a system are defined as the areas where the system exchanges\ndata.\nTheo Let me see. The first one is the client boundary, then we have the database\nboundary, and finally, the web service boundary.\nJoe Exactly! It’s important to identify the boundaries of a system because, in\nDOP, we differentiate between two kinds of data validation: validation that\noccurs at the boundaries of the system and validation that occurs inside the\nsystem. Today, we’re going to focus on validation that occurs at the boundar-\nies of the system.\nTheo Does that mean data validation at the boundaries of the system is more\nimportant?\nJoe Absolutely! Once you’ve ensured that data going into and out of the system is\nvalid, the odds for an unexpected piece of data inside the system are pretty low.\nTIP When data at system boundaries is validated, it’s not critical to validate data\nagain inside the system.\nTheo Why do we need data validation inside the system then?\nJoe It has to do with making it easier to code your system as your code base grows.\nTheo And, what’s the main purpose of data validation at the boundaries?\nJoe To prevent invalid data from going in and out of the system, and to display\ninformative errors when we encounter invalid data. Let me draw a table on the\nwhiteboard so you can see the distinction (table 7.1).\nTable 7.1 Two kinds of data validation\nKind of data validation Purpose Environment\nBoundaries Guardian Production\nInside Ease of development Dev\nTheo When will you teach me about data validation inside the system?\nJoe Later, when the code base is bigger.\n---\n"
  },
  {
    "id": 69,
    "title": "7.3 Schema flexibility and strictness",
    "level": 2,
    "start_text": "## 7.3 Schema flexibility and strictness\n",
    "end_text": "\n---\n",
    "content": "7.3 Schema flexibility and strictness 149\nvalidate(searchBooksRequestSchema, invalidSearchBooksRequest);\n// → false\nTheo The syntax of JSON Schema is much more verbose than the syntax for declar-\ning the members in a class. Why is that so?\nJoe For two reasons. First, because JSON Schema is language independent, it can\nbe used in any programming language. As I told you, there are JSON Schema\nvalidators available in most programming languages.\nTheo I see.\nJoe Second, JSON Schema allows you to express validation conditions that are much\nharder, if not impossible, to express when data is represented with classes.\nTIP The expressive power of JSON Schema is high!\nTheo Now you have triggered my curiosity. Can you give me some examples?\nJoe In a moment, we’ll talk about schema composition. Someday I’ll show you\nsome examples of advanced validation.\n NOTE Advanced validation is covered in chapter 12.\nTheo What kind of advanced validation?\nJoe What I mean by advanced validation is, for instance, validating that a number\nfalls within a given range or validating that a string matches a regular expression.\nTheo Is there a way to get details about why the request is invalid?\nJoe Absolutely! I’ll show you later. For now, let me show you how to make sure the\nresponse the server sends back to the client is valid.\nTheo It sounds much more complicated than a search book request!\nJoe Why?\nTheo Because a search response is made of multiple book results, and in each book\nresult, some of the fields are optional!",
    "formatted_section": "## 7.3 Schema flexibility and strictness\n7.3 Schema flexibility and strictness 149\nvalidate(searchBooksRequestSchema, invalidSearchBooksRequest);\n// → false\nTheo The syntax of JSON Schema is much more verbose than the syntax for declar-\ning the members in a class. Why is that so?\nJoe For two reasons. First, because JSON Schema is language independent, it can\nbe used in any programming language. As I told you, there are JSON Schema\nvalidators available in most programming languages.\nTheo I see.\nJoe Second, JSON Schema allows you to express validation conditions that are much\nharder, if not impossible, to express when data is represented with classes.\nTIP The expressive power of JSON Schema is high!\nTheo Now you have triggered my curiosity. Can you give me some examples?\nJoe In a moment, we’ll talk about schema composition. Someday I’ll show you\nsome examples of advanced validation.\n NOTE Advanced validation is covered in chapter 12.\nTheo What kind of advanced validation?\nJoe What I mean by advanced validation is, for instance, validating that a number\nfalls within a given range or validating that a string matches a regular expression.\nTheo Is there a way to get details about why the request is invalid?\nJoe Absolutely! I’ll show you later. For now, let me show you how to make sure the\nresponse the server sends back to the client is valid.\nTheo It sounds much more complicated than a search book request!\nJoe Why?\nTheo Because a search response is made of multiple book results, and in each book\nresult, some of the fields are optional!\n---\n"
  },
  {
    "id": 70,
    "title": "7.4 Schema composition",
    "level": 2,
    "start_text": "## 7.4 Schema composition\n",
    "end_text": "\n---\n",
    "content": "7.4 Schema composition\nTheo What about validating data that comes from an external web service?\nJoe Can you give me an example?\nTheo In the near future, we’ll have to integrate with a service called Open Library\nBooks API that provides detailed information about books.\n NOTE For information on the Open Library Books API, see https://openlibrary\n.org/dev/docs/api/books.\nJoe Can you show me, for instance, the service response for Watchmen?\nTheo Sure. Here you go.\nTheo taps a few keys on his keyboard and brings up the response. Joe looks at the JSON for\na long time.\nListing7.16 An Open Library Books API response example\n{\n\"publishers\": [\n\"DC Comics\"\n],\n\"number_of_pages\": 334,\n\"weight\": \"1.4 pounds\",\n\"physical_format\": \"Paperback\",\n\"subjects\": [\n\"Graphic Novels\",\n\"Comics & Graphic Novels\",\n\"Fiction\",\n\"Fantastic fiction\"\n],\n\"isbn_13\": [\n\"9780930289232\"\n],\n\"title\": \"Watchmen\",\n\"isbn_10\": [\n\"0930289234\"\n],\n\"publish_date\": \"April 1, 1995\",\n\"physical_dimensions\": \"10.1 x 6.6 x 0.8 inches\"\n}\nTheo asks himself, “What could be so special in this JSON?” While Joe is meditating about\nthis piece of JSON, Theo writes the JSON Schema for the Books API response. It doesn’t\nseem to be more complicated than any of the previous schemas. When Theo is done, he\nasks Joe to take a look at the schema.\nListing7.17 Schema of the Open Library Books API response\n{\n\"type\": \"object\",\n\"required\": [\"title\"],",
    "formatted_section": "## 7.4 Schema composition\n7.4 Schema composition\nTheo What about validating data that comes from an external web service?\nJoe Can you give me an example?\nTheo In the near future, we’ll have to integrate with a service called Open Library\nBooks API that provides detailed information about books.\n NOTE For information on the Open Library Books API, see https://openlibrary\n.org/dev/docs/api/books.\nJoe Can you show me, for instance, the service response for Watchmen?\nTheo Sure. Here you go.\nTheo taps a few keys on his keyboard and brings up the response. Joe looks at the JSON for\na long time.\nListing7.16 An Open Library Books API response example\n{\n\"publishers\": [\n\"DC Comics\"\n],\n\"number_of_pages\": 334,\n\"weight\": \"1.4 pounds\",\n\"physical_format\": \"Paperback\",\n\"subjects\": [\n\"Graphic Novels\",\n\"Comics & Graphic Novels\",\n\"Fiction\",\n\"Fantastic fiction\"\n],\n\"isbn_13\": [\n\"9780930289232\"\n],\n\"title\": \"Watchmen\",\n\"isbn_10\": [\n\"0930289234\"\n],\n\"publish_date\": \"April 1, 1995\",\n\"physical_dimensions\": \"10.1 x 6.6 x 0.8 inches\"\n}\nTheo asks himself, “What could be so special in this JSON?” While Joe is meditating about\nthis piece of JSON, Theo writes the JSON Schema for the Books API response. It doesn’t\nseem to be more complicated than any of the previous schemas. When Theo is done, he\nasks Joe to take a look at the schema.\nListing7.17 Schema of the Open Library Books API response\n{\n\"type\": \"object\",\n\"required\": [\"title\"],\n---\n"
  },
  {
    "id": 71,
    "title": "7.5 Details about data validation failures",
    "level": 2,
    "start_text": "## 7.5 Details about data validation failures\n",
    "end_text": "\n---\n",
    "content": "7.5 Details about data validation failures\nJoe So far, we’ve treated JSON Schema validation as though it were binary: either a\npiece of data is valid or it isn’t.\nTheo Right...\nJoe But, in fact, when a piece of data is not valid, we can get details about the\nreason of the invalidity.\nTheo Like when a required field is missing, can we get the name of the missing field?\nJoe Yes. When a piece of data is not of the expected type, we can get information\nabout that also.\nTheo That sounds very useful!\nJoe Indeed. Let me show you how it works. Until now, we used a generic validate\nfunction, but when we deal with validation failures, we need to be more specific.\nTheo Why?\nJoe Because each data validator library has its own way of exposing the details of\nadata validation failure. For instance, in JavaScript Ajv, the errors from the\nlast data validation are stored as an array inside the validator instance.\nTheo Why an array?\nJoe Because there could be several failures. But let’s start with the case of a single\nfailure. Imagine we encounter a search book request where the title field is\nnamed myTitle instead of title. Take a look at this example. As you can see,\nwe first instantiate a validator instance.\nListing7.20 Accessing validation errors in Ajv\nvar searchBooksRequestSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"title\": {\"type\": \"string\"},\n\"fields\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n},\n\"required\": [\"title\", \"fields\"]\n};\nvar invalidSearchBooksRequest = {\n\"myTitle\": \"habit\",\n\"fields\": [\"title\", \"weight\", \"number_of_pages\"]\n};\nInstantiates a\nvar ajv = new Ajv(); validator instance\najv.validate(searchBooksRequestSchema, invalidSearchBooksRequest);\najv.errors\nDisplays the\nvalidation errors",
    "formatted_section": "## 7.5 Details about data validation failures\n7.5 Details about data validation failures\nJoe So far, we’ve treated JSON Schema validation as though it were binary: either a\npiece of data is valid or it isn’t.\nTheo Right...\nJoe But, in fact, when a piece of data is not valid, we can get details about the\nreason of the invalidity.\nTheo Like when a required field is missing, can we get the name of the missing field?\nJoe Yes. When a piece of data is not of the expected type, we can get information\nabout that also.\nTheo That sounds very useful!\nJoe Indeed. Let me show you how it works. Until now, we used a generic validate\nfunction, but when we deal with validation failures, we need to be more specific.\nTheo Why?\nJoe Because each data validator library has its own way of exposing the details of\nadata validation failure. For instance, in JavaScript Ajv, the errors from the\nlast data validation are stored as an array inside the validator instance.\nTheo Why an array?\nJoe Because there could be several failures. But let’s start with the case of a single\nfailure. Imagine we encounter a search book request where the title field is\nnamed myTitle instead of title. Take a look at this example. As you can see,\nwe first instantiate a validator instance.\nListing7.20 Accessing validation errors in Ajv\nvar searchBooksRequestSchema = {\n\"type\": \"object\",\n\"properties\": {\n\"title\": {\"type\": \"string\"},\n\"fields\": {\n\"type\": \"array\",\n\"items\": {\"type\": \"string\"}\n}\n},\n\"required\": [\"title\", \"fields\"]\n};\nvar invalidSearchBooksRequest = {\n\"myTitle\": \"habit\",\n\"fields\": [\"title\", \"weight\", \"number_of_pages\"]\n};\nInstantiates a\nvar ajv = new Ajv(); validator instance\najv.validate(searchBooksRequestSchema, invalidSearchBooksRequest);\najv.errors\nDisplays the\nvalidation errors\n---\n"
  },
  {
    "id": 72,
    "title": "Summary",
    "level": 2,
    "start_text": "## Summary\n",
    "end_text": "\n---\n",
    "content": "Summary에 대한 콘텐츠",
    "formatted_section": "## Summary\nSummary에 대한 콘텐츠\n---\n"
  }
]