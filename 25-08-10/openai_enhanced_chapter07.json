[
  {
    "id": 66,
    "title": "7 Introduction\"",
    "level": 2,
    "start_text": "## 7 Introduction\n\"",
    "end_text": "\n---\n\"",
    "content": "Basic data validation\\nA solemn gift\\nThis chapter covers\\n The importance of validating data at system\\nboundaries\\n Validating data using the JSON Schema language\\n Integrating data validation into an existing code\\nbase\\n Getting detailed information about data validation\\nfailures\\nAt first glance, it may seem that embracing DOP means accessing data without validat-\\ning it and engaging in wishful thinking, where data is always valid. In fact, data valida-\\ntion is not only possible but recommended when we follow data-oriented principles.\\nThis chapter illustrates how to validate data when data is represented with\\ngeneric data structures. It focuses on data validation occurring at the boundaries of\\nthe system, while in part 3, we will deal with validating data as it flows through the\\nsystem. This chapter is a deep dive into the fourth principle of DOP.\\nPRINCIPLE #4 Separate data schema from data representation.",
    "formatted_content": "## 7 Introduction\n\"Basic data validation\\nA solemn gift\\nThis chapter covers\\n The importance of validating data at system\\nboundaries\\n Validating data using the JSON Schema language\\n Integrating data validation into an existing code\\nbase\\n Getting detailed information about data validation\\nfailures\\nAt first glance, it may seem that embracing DOP means accessing data without validat-\\ning it and engaging in wishful thinking, where data is always valid. In fact, data valida-\\ntion is not only possible but recommended when we follow data-oriented principles.\\nThis chapter illustrates how to validate data when data is represented with\\ngeneric data structures. It focuses on data validation occurring at the boundaries of\\nthe system, while in part 3, we will deal with validating data as it flows through the\\nsystem. This chapter is a deep dive into the fourth principle of DOP.\\nPRINCIPLE #4 Separate data schema from data representation.\n---\n\""
  },
  {
    "id": 67,
    "title": "7.1 Data validation in DOP\"",
    "level": 2,
    "start_text": "## 7.1 Data validation in DOP\n\"",
    "end_text": "\n---\n\"",
    "content": "Theo has rescheduled his meetings. With such an imposing deadline, he’s still not sure if\\nhe’s made a big mistake giving DOP a second chance.\\n NOTE The reason why Theo rescheduled his meetings is explained in the opener\\nfor part 2. Take a moment to read the opener if you missed it.\\nJoe What aspect of OOP do you think you will miss the most in your big project?\\nTheo Data validation.\\nJoe Can you elaborate a bit?\\nTheo In OOP, I have this strong guarantee that when a class is instantiated, its mem-\\nber fields have the proper names and proper types. But with DOP, it’s so easy\\nto have small mistakes in field names and field types.\\nJoe Well, I have good news for you! There is a way to validate data in DOP.\\nTheo How does it work? I thought DOP and data validation were two contradictory\\nconcepts!\\nJoe Not at all. It’s true that DOP doesn’t force you to validate data, but it doesn’t\\nprevent you from doing so. In DOP, the data schema is separate from the data\\nrepresentation.\\nTheo I don’t get how that would eliminate data consistency issues.\\nJoe According to DOP, the most important data to validate is data that crosses the\\nboundaries of the system.\\nTheo Which boundaries are you referring to?\\nJoe In the case of a web server, it would be the areas where the web server commu-\\nnicates with its clients and with its data sources.\\nTheo A diagram might help me see it better.\\nJoe goes to the whiteboard and picks up the pen. He then draws a diagram like the one in\\nfigure 7.1.\\nClient (e.g., web browser)\\nData\\nWeb server\\nData Data\\nWeb service Database Figure 7.1 High-level architecture of\\na modern web server",
    "formatted_content": "## 7.1 Data validation in DOP\n\"Theo has rescheduled his meetings. With such an imposing deadline, he’s still not sure if\\nhe’s made a big mistake giving DOP a second chance.\\n NOTE The reason why Theo rescheduled his meetings is explained in the opener\\nfor part 2. Take a moment to read the opener if you missed it.\\nJoe What aspect of OOP do you think you will miss the most in your big project?\\nTheo Data validation.\\nJoe Can you elaborate a bit?\\nTheo In OOP, I have this strong guarantee that when a class is instantiated, its mem-\\nber fields have the proper names and proper types. But with DOP, it’s so easy\\nto have small mistakes in field names and field types.\\nJoe Well, I have good news for you! There is a way to validate data in DOP.\\nTheo How does it work? I thought DOP and data validation were two contradictory\\nconcepts!\\nJoe Not at all. It’s true that DOP doesn’t force you to validate data, but it doesn’t\\nprevent you from doing so. In DOP, the data schema is separate from the data\\nrepresentation.\\nTheo I don’t get how that would eliminate data consistency issues.\\nJoe According to DOP, the most important data to validate is data that crosses the\\nboundaries of the system.\\nTheo Which boundaries are you referring to?\\nJoe In the case of a web server, it would be the areas where the web server commu-\\nnicates with its clients and with its data sources.\\nTheo A diagram might help me see it better.\\nJoe goes to the whiteboard and picks up the pen. He then draws a diagram like the one in\\nfigure 7.1.\\nClient (e.g., web browser)\\nData\\nWeb server\\nData Data\\nWeb service Database Figure 7.1 High-level architecture of\\na modern web server\n---\n\""
  },
  {
    "id": 68,
    "title": "7.2 JSON Schema in a nutshell\"",
    "level": 2,
    "start_text": "## 7.2 JSON Schema in a nutshell\n\"",
    "end_text": "\n---\n\"",
    "content": "Theo For now, the Library Management System is an application that runs in mem-\\nory, with no database and no HTTP clients connected to it. But Nancy will\\nprobably want me to make the system into a real web server with clients, data-\\nbase, and external services.\\nJoe OK. Let’s imagine how a client request for searching books would look.\\nTheo Basically, a search request is made of a string and the fields you’d like to\\nretrieve for the books whose title contains the string. So the request has two\\nfields: title, which is a string, and fields, which is an array of strings.\\nTheo quickly writes on the whiteboard. When he finishes, he steps aside to let Joe view his\\ncode for a search request.\\nListing7.1 An example of a search request\\n{\\n\\\"title\\\": \\\"habit\\\",\\n\\\"fields\\\": [\\\"title\\\", \\\"weight\\\", \\\"number_of_pages\\\"]\\n}\\nJoe I see. Let me show you how to express the schema of a search request sepa-\\nrately from the representation of the search request data.\\nTheo What do you mean exactly by “separately?”\\nJoe Data representation stands on its own, and the data schema stands on its own.\\nYou are free to validate that a piece of data conforms with a data schema as you\\nwill and when you will.\\nTIP In DOP, the data schema is separate from the data representation.\\nTheo It’s a bit abstract for me.\\nJoe I know. It will become much clearer in a moment. For now, I am going to show\\nyou how to build the data schema for the search request in a schema language\\ncalled JSON Schema.\\nTheo I love JSON!\\n NOTE Information on the JSON Schema language can be found at https://json\\n-schema.org. The schemas in this book use JSON Schema version 2020-12.\\nJoe First, we have to express the data type of the request. What’s the data type in\\nthe case of a book search request?\\nTheo It’s a map.\\nJoe In JSON Schema, the data type for maps is called object. Look at this basic\\nskeleton of a map. It’s a map with two fields: type and properties.\\nJoe goes to the whiteboard. He quickly writes the code for the map with its two fields.\\nListing7.2 Basic schema skeleton of a map\\n{\\n\\\"type\\\": \\\"object\\\",\\n\\\"properties\\\": {...}\\n}",
    "formatted_content": "## 7.2 JSON Schema in a nutshell\n\"Theo For now, the Library Management System is an application that runs in mem-\\nory, with no database and no HTTP clients connected to it. But Nancy will\\nprobably want me to make the system into a real web server with clients, data-\\nbase, and external services.\\nJoe OK. Let’s imagine how a client request for searching books would look.\\nTheo Basically, a search request is made of a string and the fields you’d like to\\nretrieve for the books whose title contains the string. So the request has two\\nfields: title, which is a string, and fields, which is an array of strings.\\nTheo quickly writes on the whiteboard. When he finishes, he steps aside to let Joe view his\\ncode for a search request.\\nListing7.1 An example of a search request\\n{\\n\\\"title\\\": \\\"habit\\\",\\n\\\"fields\\\": [\\\"title\\\", \\\"weight\\\", \\\"number_of_pages\\\"]\\n}\\nJoe I see. Let me show you how to express the schema of a search request sepa-\\nrately from the representation of the search request data.\\nTheo What do you mean exactly by “separately?”\\nJoe Data representation stands on its own, and the data schema stands on its own.\\nYou are free to validate that a piece of data conforms with a data schema as you\\nwill and when you will.\\nTIP In DOP, the data schema is separate from the data representation.\\nTheo It’s a bit abstract for me.\\nJoe I know. It will become much clearer in a moment. For now, I am going to show\\nyou how to build the data schema for the search request in a schema language\\ncalled JSON Schema.\\nTheo I love JSON!\\n NOTE Information on the JSON Schema language can be found at https://json\\n-schema.org. The schemas in this book use JSON Schema version 2020-12.\\nJoe First, we have to express the data type of the request. What’s the data type in\\nthe case of a book search request?\\nTheo It’s a map.\\nJoe In JSON Schema, the data type for maps is called object. Look at this basic\\nskeleton of a map. It’s a map with two fields: type and properties.\\nJoe goes to the whiteboard. He quickly writes the code for the map with its two fields.\\nListing7.2 Basic schema skeleton of a map\\n{\\n\\\"type\\\": \\\"object\\\",\\n\\\"properties\\\": {...}\\n}\n---\n\""
  },
  {
    "id": 69,
    "title": "7.3 Schema flexibility and strictness\"",
    "level": 2,
    "start_text": "## 7.3 Schema flexibility and strictness\n\"",
    "end_text": "\n---\n\"",
    "content": "Joe Can you give me an example of what a book search response would look like?\\nTheo Take a look at this example. It’s a search response with information about two\\nbooks: 7 Habits of Highly Effective People and The Power of Habit.\\nListing7.10 An example of a search response\\n[\\n{\\n\\\"title\\\": \\\"7 Habits of Highly Effective People\\\",\\n\\\"available\\\": true,\\n\\\"isbn\\\": \\\"978-0812981605\\\",\\n\\\"subtitle\\\": \\\"Powerful Lessons in Personal Change\\\",\\n\\\"number_of_pages\\\": 432\\n},\\n{\\n\\\"title\\\": \\\"The Power of Habit\\\",\\n\\\"available\\\": false,\\n\\\"isbn_13\\\": \\\"978-1982137274\\\",\\n\\\"subtitle\\\": \\\"Why We Do What We Do in Life and Business\\\",\\n\\\"subjects\\\": [\\n\\\"Social aspects\\\",\\n\\\"Habit\\\",\\n\\\"Change (Psychology)\\\"\\n]\\n}\\n]\\nJoe It’s funny that you mention The Power of Habit. I’m reading this book in order\\nto get rid of my habit of biting my nails. Anyway, what fields are required and\\nwhat fields are optional in a book search response?\\nTheo In book information, the title and available fields are required. The other\\nfields are optional.\\nJoe As I told you when we built the schema for the book search request, fields in a\\nmap are optional by default. In order to make a field mandatory, we have to\\ninclude it in the required array. I’d probably implement it with something\\nlike this.\\nListing7.11 Schema of a search response\\nvar searchBooksResponseSchema = {\\n\\\"type\\\": \\\"array\\\",\\n\\\"items\\\": {\\n\\\"type\\\": \\\"object\\\",\\n\\\"required\\\": [\\\"title\\\", \\\"available\\\"],\\n\\\"properties\\\": {\\n\\\"title\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"available\\\": {\\\"type\\\": \\\"boolean\\\"},\\n\\\"subtitle\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"number_of_pages\\\": {\\\"type\\\": \\\"integer\\\"},\\n\\\"subjects\\\": {\\n\\\"type\\\": \\\"array\\\",\\n\\\"items\\\": {\\\"type\\\": \\\"string\\\"}\\n},\\n\\\"isbn\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"isbn_13\\\": {\\\"type\\\": \\\"string\\\"}\\n}\\n}\\n};\\nTIP In JSON Schema, map fields are optional by default.",
    "formatted_content": "## 7.3 Schema flexibility and strictness\n\"Joe Can you give me an example of what a book search response would look like?\\nTheo Take a look at this example. It’s a search response with information about two\\nbooks: 7 Habits of Highly Effective People and The Power of Habit.\\nListing7.10 An example of a search response\\n[\\n{\\n\\\"title\\\": \\\"7 Habits of Highly Effective People\\\",\\n\\\"available\\\": true,\\n\\\"isbn\\\": \\\"978-0812981605\\\",\\n\\\"subtitle\\\": \\\"Powerful Lessons in Personal Change\\\",\\n\\\"number_of_pages\\\": 432\\n},\\n{\\n\\\"title\\\": \\\"The Power of Habit\\\",\\n\\\"available\\\": false,\\n\\\"isbn_13\\\": \\\"978-1982137274\\\",\\n\\\"subtitle\\\": \\\"Why We Do What We Do in Life and Business\\\",\\n\\\"subjects\\\": [\\n\\\"Social aspects\\\",\\n\\\"Habit\\\",\\n\\\"Change (Psychology)\\\"\\n]\\n}\\n]\\nJoe It’s funny that you mention The Power of Habit. I’m reading this book in order\\nto get rid of my habit of biting my nails. Anyway, what fields are required and\\nwhat fields are optional in a book search response?\\nTheo In book information, the title and available fields are required. The other\\nfields are optional.\\nJoe As I told you when we built the schema for the book search request, fields in a\\nmap are optional by default. In order to make a field mandatory, we have to\\ninclude it in the required array. I’d probably implement it with something\\nlike this.\\nListing7.11 Schema of a search response\\nvar searchBooksResponseSchema = {\\n\\\"type\\\": \\\"array\\\",\\n\\\"items\\\": {\\n\\\"type\\\": \\\"object\\\",\\n\\\"required\\\": [\\\"title\\\", \\\"available\\\"],\\n\\\"properties\\\": {\\n\\\"title\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"available\\\": {\\\"type\\\": \\\"boolean\\\"},\\n\\\"subtitle\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"number_of_pages\\\": {\\\"type\\\": \\\"integer\\\"},\\n\\\"subjects\\\": {\\n\\\"type\\\": \\\"array\\\",\\n\\\"items\\\": {\\\"type\\\": \\\"string\\\"}\\n},\\n\\\"isbn\\\": {\\\"type\\\": \\\"string\\\"},\\n\\\"isbn_13\\\": {\\\"type\\\": \\\"string\\\"}\\n}\\n}\\n};\\nTIP In JSON Schema, map fields are optional by default.\n---\n\""
  }
]